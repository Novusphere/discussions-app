{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport * from \"./discussions\";\nexport * from \"./eos\";\nimport { RedditService, DiscussionService } from \"./discussions/index\";\nimport { EOS } from \"./eos\";\nimport { NSDB } from \"./nsdb\";\nimport { Settings } from \"./settings\";\nimport DummyService from \"./discussions/service/dummy\";\nexport var reddit = new RedditService();\nexport var discussions = new DiscussionService();\nexport var dummy = new DummyService();\nexport var nsdb = new NSDB();\nexport var eos = new EOS();\nexport var settings = new Settings();\nexport function init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return settings.init();\n\n          case 2:\n            _context.next = 4;\n            return nsdb.init(settings.novusphereEndPoint);\n\n          case 4:\n            _context.next = 6;\n            return eos.init(settings.eosNetwork);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _init.apply(this, arguments);\n}\n\nexport function sleep(timeMilliseconds) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeMilliseconds);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}