{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { BrianKey, SectionHeader } from \"../..\";\nimport { Collapse } from \"../..\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { observer } from 'mobx-react';\n\nvar GenerateKey = function GenerateKey(_ref) {\n  var currentStep = _ref.currentStep,\n      generateBrianKey = _ref.generateBrianKey,\n      onHeaderClick = _ref.onHeaderClick;\n  return __jsx(React.Fragment, null, __jsx(SectionHeader, {\n    currentStep: currentStep,\n    header: '2. Generate a brain key',\n    onClick: onHeaderClick\n  }), __jsx(React.Fragment, null, __jsx(Collapse, {\n    isOpened: currentStep === 2,\n    springConfig: {\n      stiffness: 210,\n      damping: 20\n    }\n  }, __jsx(\"div\", {\n    className: 'mv2 field-container w-50'\n  }, __jsx(\"span\", {\n    className: 'b f6 black lh-copy db mb2 enable-user-select'\n  }, \"The Brainkey is the seed phrase from which your public-private key pairs are generated. You can restore the public-private key pairs from your Brainkey if you lose the keys. The Brainkey itself cannot be restored once lost!\"), generateBrianKey['result'] ? __jsx(BrianKey, {\n    results: generateBrianKey['result'].split(' ')\n  }) : __jsx(\"button\", {\n    disabled: generateBrianKey['pending'],\n    className: 'mt3 f6 link dim ph3 pv2 dib mr2 pointer white bg-green',\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return generateBrianKey();\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }))\n  }, generateBrianKey['pending'] ? __jsx(FontAwesomeIcon, {\n    width: 13,\n    icon: faSpinner,\n    spin: true\n  }) : 'Generate')))));\n};\n\nexport default observer(GenerateKey);","map":null,"metadata":{},"sourceType":"module"}