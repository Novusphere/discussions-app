{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { BrianKey, SectionHeader } from \"../..\";\nimport { Collapse } from \"../..\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { observer } from 'mobx-react';\n\nconst GenerateKey = ({\n  currentStep,\n  generateBrianKey,\n  onHeaderClick\n}) => __jsx(React.Fragment, null, __jsx(SectionHeader, {\n  currentStep: currentStep,\n  header: '2. Generate a brain key',\n  onClick: onHeaderClick\n}), __jsx(React.Fragment, null, __jsx(Collapse, {\n  isOpened: currentStep === 2,\n  springConfig: {\n    stiffness: 210,\n    damping: 20\n  }\n}, __jsx(\"div\", {\n  className: 'mv2 field-container w-50'\n}, __jsx(\"span\", {\n  className: 'b f6 black lh-copy db mb2 enable-user-select'\n}, \"The Brainkey is the seed phrase from which your public-private key pairs are generated. You can restore the public-private key pairs from your Brainkey if you lose the keys. The Brainkey itself cannot be restored once lost!\"), generateBrianKey['result'] ? __jsx(BrianKey, {\n  results: generateBrianKey['result'].split(' ')\n}) : __jsx(\"button\", {\n  disabled: generateBrianKey['pending'],\n  className: 'mt3 f6 link dim ph3 pv2 dib mr2 pointer white bg-green',\n  onClick: async () => {\n    try {\n      await generateBrianKey();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}, generateBrianKey['pending'] ? __jsx(FontAwesomeIcon, {\n  width: 13,\n  icon: faSpinner,\n  spin: true\n}) : 'Generate')))));\n\nexport default observer(GenerateKey);","map":null,"metadata":{},"sourceType":"module"}