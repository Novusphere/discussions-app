{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Router from 'next/router';\nimport Link from 'next/link';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faSearch, faSpinner, faUserCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Tooltip } from 'react-tippy';\nimport { ModalOptions } from \"../../constants/globals\";\nimport { UserNotifications } from \"./..\";\nlet TitleHeader = (_dec = inject('tagStore', 'newAuthStore', 'uiStore', 'notificationsStore'), _dec(_class = observer(_class = (_temp = class TitleHeader extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: ''\n    };\n\n    this.renderUserSettings = () => {\n      const {\n        logOut\n      } = this.props.newAuthStore;\n      return __jsx(\"div\", {\n        className: 'tooltip',\n        style: {\n          width: 200\n        }\n      }, __jsx(Link, {\n        href: '/settings'\n      }, __jsx(\"a\", {\n        rel: 'Open settings',\n        className: 'db mb2'\n      }, \"settings\")), __jsx(\"a\", {\n        title: 'ATMOS Balance',\n        className: 'db mb2'\n      }, \"0 ATMOS\"), __jsx(\"a\", {\n        rel: 'Open settings',\n        className: 'db pointer',\n        onClick: () => {\n          logOut();\n        }\n      }, logOut['match']({\n        pending: () => __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        }),\n        rejected: () => 'Unable to disconnect',\n        resolved: () => 'disconnect'\n      })));\n    };\n\n    this.renderAuthActions = () => {\n      const {\n        notificationsStore\n      } = this.props;\n      const {\n        showModal\n      } = this.props.uiStore;\n      const {\n        hasAccount,\n        getActiveDisplayName,\n        checkInitialConditions\n      } = this.props.newAuthStore;\n\n      if (checkInitialConditions['pending']) {\n        return __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        });\n      }\n\n      if (hasAccount) {\n        const {\n          hasNotifications,\n          notificationCount\n        } = notificationsStore;\n        return __jsx(\"div\", {\n          className: 'f4 flex items-center'\n        }, __jsx(Tooltip, {\n          animateFill: false,\n          interactive: true,\n          interactiveBorder: 20,\n          unmountHTMLWhenHide: true,\n          html: __jsx(UserNotifications, {\n            notificationsStore: notificationsStore\n          }),\n          position: 'bottom-end',\n          trigger: 'mouseenter'\n        }, __jsx(Link, {\n          href: '/notifications'\n        }, __jsx(\"a\", {\n          rel: 'Open your notifications'\n        }, __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faBell,\n          className: 'ph2',\n          color: hasNotifications ? '#ad3b2b' : '#7D8894'\n        }), hasNotifications && __jsx(\"span\", {\n          className: 'f5 b notification-count'\n        }, notificationCount)))), __jsx(Link, {\n          href: `/new`\n        }, __jsx(\"button\", {\n          title: 'Create new post',\n          className: 'ml3'\n        }, __jsx(\"span\", {\n          className: 'f6 white'\n        }, \"New Post\"))), __jsx(Tooltip, {\n          animateFill: false,\n          interactive: true,\n          html: this.renderUserSettings(),\n          position: 'bottom-end',\n          trigger: 'mouseenter'\n        }, __jsx(Link, {\n          href: {\n            pathname: '/u',\n            query: {\n              username: getActiveDisplayName\n            }\n          },\n          as: `/u/${getActiveDisplayName}`\n        }, __jsx(\"a\", {\n          rel: 'Open your profile',\n          className: 'flex items-center user-container pointer dim'\n        }, __jsx(\"span\", {\n          className: 'b f6 pl1 pr3 black'\n        }, getActiveDisplayName), __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faUserCircle,\n          color: '#7D8894'\n        })))));\n      }\n\n      return __jsx(React.Fragment, null, __jsx(\"button\", {\n        className: 'button-outline mr2',\n        onClick: () => showModal(ModalOptions.signIn)\n      }, \"Login\"), __jsx(\"button\", {\n        onClick: () => {\n          showModal(ModalOptions.signUp);\n        }\n      }, \"Sign Up\"));\n    };\n\n    this.renderActiveTag = () => {\n      const {\n        setActiveTag,\n        activeTag\n      } = this.props.tagStore;\n\n      if (!activeTag) {\n        return __jsx(Link, {\n          href: '/'\n        }, __jsx(\"a\", null, \"home\"));\n      }\n\n      return setActiveTag['match']({\n        pending: () => __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        }),\n        rejected: () => __jsx(Link, {\n          href: '/'\n        }, __jsx(\"a\", null, \"home\")),\n        resolved: tagModel => __jsx(Link, {\n          href: tagModel.url\n        }, __jsx(\"a\", {\n          className: 'flex items-center'\n        }, !tagModel.icon ? null : __jsx(\"img\", {\n          className: 'tag-icon pr2',\n          src: tagModel.icon,\n          alt: `${tagModel.name} icon`\n        }), __jsx(\"span\", null, tagModel.name)))\n      });\n    };\n\n    this.handleKeySearch = e => {\n      const key = e.key;\n\n      if (key.match(/NumpadEnter|Enter/)) {\n        const value = e.target.value;\n        Router.push({\n          pathname: '/search',\n          query: {\n            q: value\n          }\n        });\n        e.preventDefault();\n      }\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: 'title-header flex items-center z-999'\n    }, __jsx(\"div\", {\n      className: 'container flex items-center justify-between'\n    }, __jsx(\"span\", {\n      className: 'f4 black'\n    }, this.renderActiveTag()), __jsx(\"div\", {\n      className: 'mh4 flex-auto relative flex items-center'\n    }, __jsx(\"input\", {\n      className: 'w-100 main-search pl4',\n      placeholder: 'Search on Discussions.app',\n      onKeyDown: this.handleKeySearch\n    }), __jsx(FontAwesomeIcon, {\n      width: 13,\n      icon: faSearch,\n      className: 'absolute left-0 ml2 pl1'\n    })), __jsx(\"div\", {\n      className: 'flex'\n    }, this.renderAuthActions())));\n  }\n\n}, _temp)) || _class) || _class);\nexport default TitleHeader;","map":null,"metadata":{},"sourceType":"module"}