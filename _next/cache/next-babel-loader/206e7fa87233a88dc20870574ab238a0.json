{"ast":null,"code":"import { REDDIT_URL } from \"./attachment\";\nimport { RedditService } from \"./service/reddit\";\nexport default class Thread {\n  constructor() {\n    this.openingPost = void 0;\n    this.map = void 0;\n  }\n\n  get title() {\n    return this.openingPost ? this.openingPost.title : undefined;\n  }\n\n  get uuid() {\n    return this.openingPost ? this.openingPost.uuid : undefined;\n  }\n\n  get totalReplies() {\n    return this.openingPost ? this.openingPost.totalReplies : 0;\n  }\n\n  init(posts) {\n    this.map = {};\n    if (posts.length == 0) return new Error('Cannot create thread with zero posts');\n    const threadUuid = posts[0].threadUuid;\n    this.openingPost = posts.find(p => p.uuid == threadUuid);\n    if (!this.openingPost) return new Error('No opening post found!');\n\n    for (let i = 0; i < posts.length; i++) {\n      const p = posts[i];\n      if (p.uuid in this.map) continue; //if (!p.edit) {\n\n      if (this.map[p.uuid] == undefined) {\n        this.map[p.uuid] = p;\n      } //} else if (p.parentUuid) {\n      //    const parent = this.map[p.parentUuid]\n      //    if (parent) {\n      //        parent.applyEdit(p)\n      //    }\n      //}\n\n    }\n  }\n\n  async importRedditReplies() {\n    if (!this.openingPost) return;\n    if (!this.openingPost.attachment.value) return;\n    if (!this.openingPost.attachment.value.match(REDDIT_URL)) return;\n    let url = this.openingPost.attachment.value.split('/');\n    var r = url.findIndex(p => p == 'r');\n\n    if (r > -1) {\n      let rs = new RedditService();\n      let redditPosts = await rs.getThread(this.openingPost, url[r + 1], url[r + 3]);\n\n      if (redditPosts.length > 0) {\n        for (let i = 1; i < redditPosts.length; i++) this.map[redditPosts[i].uuid] = redditPosts[i];\n\n        this.openingPost.uuid = redditPosts[0].uuid;\n      }\n    }\n  }\n\n  async normalize() {\n    if (!this.openingPost) return;\n    await this.importRedditReplies();\n    let posts = []; // build the thread\n\n    for (var uuid in this.map) {\n      const post = this.map[uuid];\n\n      if (post.parentUuid) {\n        const parent = this.map[post.parentUuid];\n\n        if (parent) {\n          post.depth = parent.depth + 1;\n          parent.replies.push(post);\n        }\n      }\n\n      posts.push(post);\n    } // wait for normalization\n\n\n    await Promise.all(posts.map(p => p.normalize()));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}