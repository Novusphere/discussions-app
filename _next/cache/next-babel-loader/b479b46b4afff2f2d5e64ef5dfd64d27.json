{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport Select from 'react-select';\nimport { Editor } from \"./..\";\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Form extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.enterKeyEventListener = e => {\n      const key = e.code;\n\n      if (key.match(/NumpadEnter|Enter/)) {\n        e.preventDefault();\n\n        if (typeof this.props.form !== 'undefined' && typeof this.props.form.onSubmit !== 'undefined') {\n          this.props.form.onSubmit(e);\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keypress', this.enterKeyEventListener);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.enterKeyEventListener);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      form,\n      children,\n      hideSubmitButton\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"form\", \"children\", \"hideSubmitButton\"]);\n\n    if (typeof form === 'undefined' || typeof form.fields === 'undefined') return null;\n\n    const renderButton = (field, type, rest) => {\n      if (Array.isArray(field.accessor.$extra.options)) {\n        return field.accessor.$extra.options.map(({\n          value,\n          disabled,\n          title,\n          className,\n          onClick\n        }) => __jsx(\"button\", {\n          datatype: type,\n          onClick: e => {\n            form.onSubmit(e);\n\n            if (onClick) {\n              onClick(form.form);\n            }\n\n            e.preventDefault();\n          },\n          disabled: disabled || onClick && onClick['state'] && onClick['state'] === 'pending' || false,\n          key: `${field.name}-${value}`,\n          title: title || null,\n          className: classNames(['mt3 f6 link dim ph3 pv2 dib mr2 pointer', {\n            'white bg-green': !className,\n            [className]: className\n          }])\n        }, onClick && onClick['state'] && onClick['state'] === 'pending' ? __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true,\n          className: 'mr1'\n        }) : null, value));\n      }\n\n      return __jsx(\"button\", _extends({\n        datatype: type,\n        type: 'button',\n        key: field.accessor.value\n      }, rest, {\n        className: classNames({\n          'button button-light dim pointer db f6 pv1 mh1 flex-auto': true\n        })\n      }), field.accessor.value);\n    };\n\n    const renderFields = fields => {\n      return fields.map(field => {\n        const bind = field.accessor.bind();\n\n        if (field.accessor.$extra && field.accessor.$extra.render === false) {\n          return null;\n        }\n\n        switch (form.types[field.name]) {\n          case 'dropdown':\n            return __jsx(React.Fragment, {\n              key: field.name\n            }, __jsx(\"div\", {\n              className: 'field-container pb3 inline-labels'\n            }, !field.hideLabels && __jsx(\"label\", {\n              htmlFor: field.accessor.id,\n              className: 'w-40'\n            }, field.accessor.label), __jsx(\"div\", {\n              className: classNames(['w-60 flex flex-column', {\n                'w-100': field.hideLabels\n              }])\n            }, __jsx(Select, _extends({\n              className: 'db f6 react-select-dropdown',\n              classNamePrefix: 'rs',\n              options: field.accessor.$extra.options\n            }, bind)), __jsx(\"span\", {\n              className: 'error f6 db pv2'\n            }, field.accessor.error))));\n\n          case 'textarea':\n            return __jsx(React.Fragment, {\n              key: field.name\n            }, __jsx(\"div\", {\n              className: 'field-container pb3 inline-labels'\n            }, !field.hideLabels && __jsx(\"label\", {\n              htmlFor: field.accessor.id,\n              className: 'w-40'\n            }, field.accessor.label), __jsx(\"div\", {\n              className: classNames(['w-60 flex flex-column', {\n                'w-100': field.hideLabels\n              }])\n            }, __jsx(\"textarea\", _extends({\n              rows: \"4\",\n              cols: \"50\"\n            }, bind, {\n              className: 'db f6 form-input'\n            })), __jsx(\"span\", {\n              className: 'error f6 db pv2 tl'\n            }, field.accessor.error))));\n\n          case 'richtext':\n            return __jsx(React.Fragment, {\n              key: field.name\n            }, __jsx(\"div\", {\n              className: 'field-container pb3 inline-labels'\n            }, !field.hideLabels && __jsx(\"label\", {\n              htmlFor: field.accessor.id,\n              className: 'w-40'\n            }, field.accessor.label), __jsx(\"div\", {\n              className: classNames(['w-60 h-100 flex flex-column', {\n                'w-100': field.hideLabels\n              }])\n            }, __jsx(Editor, _extends({\n              placeholder: field.placeholder,\n              className: 'db f6'\n            }, bind)), __jsx(\"span\", {\n              className: 'error f6 db pv2'\n            }, field.accessor.error))));\n\n          case 'button':\n            const _ref = bind,\n                  {\n              type\n            } = _ref,\n                  rest = _objectWithoutProperties(_ref, [\"type\"]);\n\n            return __jsx(\"div\", {\n              className: 'field-container pb3 db flex justify-end items-center',\n              key: field.name\n            }, __jsx(\"div\", {\n              className: classNames([{\n                'w-80': !field.hideLabels,\n                'w-100': field.hideLabels\n              }])\n            }, renderButton(field, type, rest)));\n\n          case 'radiogroup':\n            return __jsx(\"div\", {\n              key: field.name,\n              className: 'flex self-end w-80 mb3'\n            }, field.accessor.$extra.options.map(option => __jsx(\"div\", {\n              className: 'flex items-center',\n              key: option.value\n            }, __jsx(\"input\", {\n              type: 'radio',\n              id: option.value,\n              name: option.value,\n              value: option.value,\n              checked: field.accessor.value === option.value,\n              onChange: e => {\n                field.accessor.onChange(e);\n\n                if (option.onClick) {\n                  option.onClick(form);\n                }\n              }\n            }), __jsx(\"label\", {\n              htmlFor: option.value,\n              className: 'pl1 mr3 f6 lh-copy'\n            }, option.value))));\n\n          default:\n            return __jsx(React.Fragment, {\n              key: field.name\n            }, __jsx(\"div\", {\n              className: 'field-container pb3 inline-labels'\n            }, !field.hideLabels && __jsx(\"label\", {\n              htmlFor: field.accessor.id,\n              className: 'w-40'\n            }, field.accessor.label), __jsx(\"div\", {\n              className: classNames(['w-60 flex flex-column', {\n                'w-100': field.hideLabels\n              }])\n            }, __jsx(\"input\", _extends({}, bind, {\n              className: 'db f6 form-input'\n            })), __jsx(\"span\", {\n              className: 'error f6 db pv2 tl'\n            }, field.accessor.error))));\n        }\n      });\n    };\n\n    return __jsx(\"form\", props, renderFields(form.fields), !hideSubmitButton && __jsx(\"button\", {\n      className: 'mt3 f6 link dim ph3 pv2 dib white bg-green pointer',\n      type: \"submit\",\n      onClick: form.onSubmit\n    }, \"Submit\"), children);\n  }\n\n}\n\nexport default observer(Form);","map":null,"metadata":{},"sourceType":"module"}