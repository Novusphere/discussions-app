{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Modal, ChooseAccountName, GenerateKey, VerifyKey } from \"../..\";\nimport { observer, inject } from 'mobx-react';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nlet SignUpModal = (_dec = inject('newAuthStore', 'uiStore'), _dec(_class = observer(_class = (_temp = class SignUpModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentStep: 1\n    };\n\n    this.goNext = () => {\n      this.setState(prevState => ({\n        currentStep: prevState.currentStep + 1\n      }));\n    };\n\n    this.goBack = () => {\n      this.setState(prevState => ({\n        currentStep: prevState.currentStep - 1\n      }));\n    };\n\n    this.setStep = step => {\n      this.setState({\n        currentStep: step\n      });\n    };\n\n    this.renderNextButtons = ({\n      signUpForm,\n      verifyBKForm\n    }) => {\n      const {\n        generateBrianKey\n      } = this.props.newAuthStore;\n\n      const renderButton = (text, color, onClick, disabled = false) => {\n        const loading = onClick && onClick['state'] && onClick['pending'];\n        return __jsx(\"button\", {\n          disabled: onClick['pending'] || loading || disabled,\n          className: 'f6 link dim ph3 pv2 dib pointer white ' + color,\n          onClick: onClick\n        }, loading ? __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        }) : text);\n      };\n\n      switch (this.state.currentStep) {\n        case 1:\n          return __jsx(React.Fragment, null, renderButton('Next', 'bg-green', e => {\n            signUpForm.onSubmit(e);\n            this.goNext();\n          }, signUpForm.form.hasError));\n\n        case 2:\n          return __jsx(React.Fragment, null, renderButton('Previous', 'bg-blue', this.goBack), renderButton('Next', 'bg-green', () => {\n            this.goNext();\n          }, !generateBrianKey['result']));\n\n        case 3:\n          return __jsx(React.Fragment, null, renderButton('Previous', 'bg-blue', this.goBack), renderButton('Finish', 'bg-red', e => {\n            verifyBKForm.onSubmit(e);\n          }, verifyBKForm.form.hasError));\n      }\n    };\n  }\n\n  componentDidMount() {// this.setStep(1)\n  }\n\n  render() {\n    // const { generateBrianKey, setAccountAndPassword, verifyBKForm } = this.props.authStore\n    // const setAccountAndPasswordForm = setAccountAndPassword\n    // const verifyBKFormForm = verifyBKForm\n    const {\n      signUpForm,\n      verifyBKForm,\n      generateBrianKey\n    } = this.props.newAuthStore;\n    const _signUpForm = signUpForm;\n    const _verifyBKForm = verifyBKForm;\n    return __jsx(Modal, null, ({\n      CloseIcon\n    }) => __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: 'flex items-center justify-end'\n    }, __jsx(CloseIcon, null)), __jsx(\"div\", {\n      className: 'modal-body'\n    }, __jsx(ChooseAccountName, {\n      form: _signUpForm,\n      currentStep: this.state.currentStep,\n      onHeaderClick: () => null\n    }), __jsx(GenerateKey, {\n      generateBrianKey: generateBrianKey,\n      currentStep: this.state.currentStep,\n      onHeaderClick: () => null\n    }), __jsx(VerifyKey, {\n      form: _verifyBKForm,\n      currentStep: this.state.currentStep,\n      onHeaderClick: () => null\n    })), __jsx(\"div\", {\n      className: 'modal-footer'\n    }, this.renderNextButtons({\n      signUpForm: _signUpForm,\n      verifyBKForm: _verifyBKForm\n    }))));\n  }\n\n}, _temp)) || _class) || _class);\nexport default SignUpModal;","map":null,"metadata":{},"sourceType":"module"}