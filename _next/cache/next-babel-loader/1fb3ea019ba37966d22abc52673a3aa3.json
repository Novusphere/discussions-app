{"ast":null,"code":"export const YOUTUBE_URL = /https?:\\/\\/(www\\.)?youtu(\\.)?be(\\.com)?\\//i;\nexport const IMGUR_IMG_URL = /https?:\\/\\/(www\\.)?i\\.imgur\\.com\\//i;\nexport const REDDIT_URL = /https?:\\/\\/(www\\.)?reddit\\.com\\//i;\nexport const TWITTER_URL = /https?:\\/\\/(www\\.)?twitter\\.com\\//i;\nexport const DTUBE_URL = /https?:\\/\\/(www\\.)?d\\.tube\\//;\nexport const SOUNDCLOUD_URL = /https?:\\/\\/(www\\.)?soundcloud\\.com\\//;\nexport const BITCHUTE_URL = /https?:\\/\\/(www\\.)?bitchute\\.com\\//;\nexport const TRYBE_URL = /https?:\\/\\/(www\\.)?trybe\\.one\\//;\nexport const WHALESHARES_URL = /https?:\\/\\/(www\\.)?whaleshares\\.io\\//;\nexport const STEEMIT_URL = /https?:\\/\\/(www\\.)?steemit\\.com\\//;\nexport const IMAGE_TYPES = /\\.(png|jpg|jpeg|gif)$/i;\nimport { nsdb } from \"../index\";\nexport let AttachmentType;\n\n(function (AttachmentType) {\n  AttachmentType[\"Undefined\"] = \"\";\n  AttachmentType[\"IPFS\"] = \"ipfs\";\n  AttachmentType[\"Url\"] = \"url\";\n  AttachmentType[\"Text\"] = \"text\";\n})(AttachmentType || (AttachmentType = {}));\n\nexport let AttachmentDisplay;\n\n(function (AttachmentDisplay) {\n  AttachmentDisplay[\"Undefined\"] = \"\";\n  AttachmentDisplay[\"HTML\"] = \"html\";\n  AttachmentDisplay[\"Markdown\"] = \"md\";\n  AttachmentDisplay[\"Link\"] = \"link\";\n  AttachmentDisplay[\"IFrame\"] = \"iframe\";\n  AttachmentDisplay[\"MP4\"] = \"mp4\";\n  AttachmentDisplay[\"Image\"] = \"img\";\n})(AttachmentDisplay || (AttachmentDisplay = {}));\n\nexport class Attachment {\n  async setFromOEmbed(url) {\n    try {\n      let oembed = JSON.parse((await nsdb.cors(url)));\n      this.trust_provider = oembed.provider_url;\n      this.value = oembed.html;\n      this.type = AttachmentType.Text;\n      this.display = AttachmentDisplay.HTML;\n    } catch (ex) {\n      //console.log(ex);    \n      return;\n    }\n  }\n\n  isNormalizedImage() {\n    if (this.type == AttachmentType.Url) {\n      if (this.value.match(IMAGE_TYPES)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async normalize() {\n    if (!this.value) return;\n\n    if (this.type == AttachmentType.IPFS) {\n      this.type = AttachmentType.Url;\n      this.value = 'https://gateway.ipfs.io/ipfs/' + this.value;\n    } else if (this.type == AttachmentType.Url) {\n      if (this.value.match(YOUTUBE_URL)) {\n        await this.setFromOEmbed(`https://www.youtube.com/oembed?format=json&url=${this.value}`);\n      } else if (this.value.match(TWITTER_URL)) {\n        await this.setFromOEmbed(`https://publish.twitter.com/oembed?format=json&url=${this.value}`);\n      } else if (this.value.match(DTUBE_URL)) {\n        await this.setFromOEmbed(`https://api.d.tube/oembed?url=${this.value.replace('/#!/', '/')}`);\n      } else if (this.value.match(REDDIT_URL)) {\n        await this.setFromOEmbed(`https://www.reddit.com/oembed?url=${this.value}`);\n      } else if (this.value.match(SOUNDCLOUD_URL)) {\n        await this.setFromOEmbed(`https://soundcloud.com/oembed?format=json&url=${this.value}`);\n      } else if (this.value.match(BITCHUTE_URL)) {\n        const vid = this.value.match(/video\\/[a-zA-Z0-9]+/);\n\n        if (vid && vid.length > 0) {\n          this.value = 'https://www.bitchute.com/embed/' + vid[0].substring(6);\n          this.display = AttachmentDisplay.IFrame;\n        }\n      } else if (this.isNormalizedImage()) {\n        this.display = AttachmentDisplay.Image;\n      } // TO-DO: inliners (trybe, steem, etc.)\n      // always HTTPS iframe, HTTP will be rejeted by most browsers\n\n\n      if (this.display == AttachmentDisplay.IFrame) {\n        if (this.value.indexOf('http:') == 0) {\n          this.value = 'https:' + this.value.substring(5);\n        }\n      }\n    }\n  }\n\n  constructor() {\n    this.value = void 0;\n    this.type = void 0;\n    this.display = void 0;\n    this.trust_provider = void 0;\n    this.value = '';\n    this.type = AttachmentType.Undefined;\n    this.display = AttachmentDisplay.Undefined;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}