{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Modal, SignInModalOptions, SuccessSetup, SetNewBK, ScatterAskForPassword, BrainKeySetPassword } from \"../..\";\nimport { observer, inject } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { SignInMethods } from \"../../../constants/globals\";\nimport { SignInOptions } from \"../../../constants/sign-in-options\";\nimport dynamic from 'next/dynamic';\nvar StepWizard = dynamic(function () {\n  return import('react-step-wizard');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-step-wizard')];\n    },\n    modules: ['react-step-wizard']\n  }\n});\nvar SignInModal = (_dec = inject('newAuthStore', 'uiStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SignInModal, _React$Component);\n\n  function SignInModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SignInModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SignInModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      clickedSignInOption: ''\n    };\n\n    _this.clickSignIn = function (name) {\n      if (_this.state.clickedSignInOption === name) {\n        _this.setState({\n          clickedSignInOption: ''\n        });\n      } else {\n        _this.setState({\n          clickedSignInOption: name\n        });\n      }\n\n      _this.props.newAuthStore.setClickedSignInMethod(name);\n    };\n\n    _this.renderButtons = function (choosePasswordForm, setPassword, setNewBKAndPasswordForm, setPasswordScatter) {\n      var _this$props$newAuthSt = _this.props.newAuthStore,\n          signInObject = _this$props$newAuthSt.signInObject,\n          initializeScatterLogin = _this$props$newAuthSt.initializeScatterLogin,\n          loginWithBK = _this$props$newAuthSt.loginWithBK,\n          handleStepSwitchForBK = _this$props$newAuthSt.handleStepSwitchForBK,\n          hasBKAccount = _this$props$newAuthSt.hasBKAccount;\n\n      if (signInObject.ref) {\n        switch (signInObject.step) {\n          case 1:\n            if (!_this.state.clickedSignInOption) {\n              return __jsx(\"button\", {\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                disabled: !_this.state.clickedSignInOption\n              }, \"Select a sign in method\");\n            }\n\n            switch (_this.state.clickedSignInOption) {\n              case SignInMethods.scatter:\n                if (initializeScatterLogin['pending']) {\n                  return __jsx(\"button\", {\n                    className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                    disabled: initializeScatterLogin['pending']\n                  }, __jsx(FontAwesomeIcon, {\n                    width: 13,\n                    icon: faSpinner,\n                    spin: true\n                  }));\n                }\n\n                return __jsx(\"button\", {\n                  onClick: initializeScatterLogin,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !_this.state.clickedSignInOption\n                }, \"Sign in via Scatter\");\n\n              case SignInMethods.brainKey:\n                if (hasBKAccount && loginWithBK['pending']) {\n                  return __jsx(\"button\", {\n                    className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                    disabled: loginWithBK['pending']\n                  }, __jsx(FontAwesomeIcon, {\n                    width: 13,\n                    icon: faSpinner,\n                    spin: true\n                  }));\n                }\n\n                return __jsx(React.Fragment, null, __jsx(\"button\", {\n                  onClick: function onClick() {\n                    signInObject.ref.goToStep(2);\n                  },\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !_this.state.clickedSignInOption\n                }, \"Sign in via another brain key\"), hasBKAccount ? __jsx(\"button\", {\n                  onClick: handleStepSwitchForBK,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !_this.state.clickedSignInOption\n                }, \"Continue as \", hasBKAccount) : null);\n            }\n\n            break;\n\n          case 2:\n            return _this.props.newAuthStore.loginWithBK['match']({\n              rejected: function rejected(error) {\n                return __jsx(React.Fragment, null, JSON.stringify(error), __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithBK['pending'],\n                  onClick: setNewBKAndPasswordForm.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Log In\"));\n              },\n              pending: function pending() {\n                return __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithBK['pending'],\n                  onClick: setNewBKAndPasswordForm.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, __jsx(FontAwesomeIcon, {\n                  width: 13,\n                  icon: faSpinner,\n                  spin: true\n                }));\n              },\n              resolved: function resolved() {\n                return __jsx(React.Fragment, null, __jsx(\"span\", {\n                  className: 'b pointer dim',\n                  title: 'Sign in with another sign in boost',\n                  onClick: function onClick() {\n                    return _this.props.newAuthStore.signInObject.ref.goToStep(1);\n                  }\n                }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithBK['pending'],\n                  onClick: setNewBKAndPasswordForm.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Setup and login with new account\"));\n              }\n            });\n\n          case 3:\n            return _this.props.newAuthStore.loginWithPassword['match']({\n              rejected: function rejected() {\n                return __jsx(React.Fragment, null, __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithPassword['pending'],\n                  onClick: setPassword.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Log In\"));\n              },\n              pending: function pending() {\n                return __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithPassword['pending'],\n                  onClick: setPassword.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, __jsx(FontAwesomeIcon, {\n                  width: 13,\n                  icon: faSpinner,\n                  spin: true\n                }));\n              },\n              resolved: function resolved() {\n                return __jsx(React.Fragment, null, __jsx(\"span\", {\n                  className: 'b pointer dim',\n                  title: 'Sign in with another sign in boost',\n                  onClick: function onClick() {\n                    return _this.props.newAuthStore.signInObject.ref.goToStep(1);\n                  }\n                }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.loginWithPassword['pending'],\n                  onClick: setPassword.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Log In as \", hasBKAccount));\n              }\n            });\n\n          case 4:\n            break;\n\n          case 5:\n            return _this.props.newAuthStore.initializeScatterLogin['match']({\n              rejected: function rejected() {\n                return __jsx(React.Fragment, null, __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.initializeScatterLogin['pending'],\n                  onClick: setPasswordScatter.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Log In\"));\n              },\n              pending: function pending() {\n                return __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.initializeScatterLogin['pending'],\n                  onClick: setPasswordScatter.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, __jsx(FontAwesomeIcon, {\n                  width: 13,\n                  icon: faSpinner,\n                  spin: true\n                }));\n              },\n              resolved: function resolved() {\n                return __jsx(React.Fragment, null, __jsx(\"span\", {\n                  className: 'b pointer dim',\n                  title: 'Sign in with another sign in boost',\n                  onClick: function onClick() {\n                    return _this.props.newAuthStore.signInObject.ref.goToStep(1);\n                  }\n                }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                  disabled: _this.props.newAuthStore.initializeScatterLogin['pending'],\n                  onClick: setPasswordScatter.onSubmit,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n                }, \"Log In with Scatter\"));\n              }\n            });\n        }\n      }\n    };\n\n    _this.handleRememberClick = function () {\n      var setPreferredSignInMethod = _this.props.newAuthStore.setPreferredSignInMethod;\n      setPreferredSignInMethod(_this.state.clickedSignInOption);\n    };\n\n    _this.renderRememberOption = function () {\n      var _this$props$newAuthSt2 = _this.props.newAuthStore,\n          signInObject = _this$props$newAuthSt2.signInObject,\n          preferredSignInMethod = _this$props$newAuthSt2.preferredSignInMethod;\n\n      if (signInObject.step === 1) {\n        return __jsx(\"span\", {\n          className: 'flex items-center'\n        }, __jsx(\"input\", {\n          onChange: _this.handleRememberClick,\n          type: \"checkbox\",\n          id: \"rememberOption\",\n          name: \"rememberOption\",\n          checked: preferredSignInMethod === _this.state.clickedSignInOption\n        }), __jsx(\"label\", {\n          htmlFor: \"rememberOption\",\n          className: 'ml2 f6'\n        }, \"Automatically select this option next time\"));\n      }\n    };\n\n    _this.onStepChange = function (_ref) {\n      var activeStep = _ref.activeStep;\n      _this.props.newAuthStore.signInObject.step = activeStep;\n    };\n\n    _this.setInstance = function (instance) {\n      _this.props.newAuthStore.signInObject.ref = instance;\n    };\n\n    return _this;\n  }\n\n  _createClass(SignInModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var signInObject = this.props.newAuthStore.signInObject;\n      var choosePasswordForm = this.props.newAuthStore.choosePassword;\n      var setPasswordBK = this.props.newAuthStore.setPasswordBK;\n      var setPasswordScatter = this.props.newAuthStore.setPasswordScatter;\n      var setNewBKAndPasswordForm = this.props.newAuthStore.setNewBKAndPasswordForm;\n      return __jsx(Modal, null, function (_ref2) {\n        var CloseIcon = _ref2.CloseIcon;\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: 'flex items-center justify-end'\n        }, __jsx(CloseIcon, null)), __jsx(StepWizard, {\n          instance: _this2.setInstance,\n          initialStep: signInObject.step,\n          onStepChange: _this2.onStepChange\n        }, __jsx(SignInModalOptions, {\n          signInOptions: SignInOptions,\n          optionOnClick: _this2.clickSignIn,\n          clickedSignInOption: _this2.state.clickedSignInOption\n        }), __jsx(SetNewBK, {\n          form: setNewBKAndPasswordForm\n        }), __jsx(BrainKeySetPassword, {\n          form: setPasswordBK\n        }), __jsx(SuccessSetup, null), __jsx(ScatterAskForPassword, {\n          form: setPasswordScatter\n        })), __jsx(\"div\", {\n          className: 'modal-footer'\n        }, _this2.renderRememberOption(), _this2.renderButtons(choosePasswordForm, setPasswordBK, setNewBKAndPasswordForm, setPasswordScatter)));\n      });\n    }\n  }]);\n\n  return SignInModal;\n}(React.Component), _temp)) || _class) || _class);\nexport default SignInModal;","map":null,"metadata":{},"sourceType":"module"}