{"ast":null,"code":"var _dec, _class;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Thread } from \"../../components\";\nimport { ThreadModel } from \"../../models/threadModel\";\nimport Head from 'next/head';\nlet E = (_dec = inject('postsStore', 'tagStore'), _dec(_class = observer(_class = class E extends React.Component {\n  static async getInitialProps({\n    query,\n    store\n  }) {\n    const uiStore = store.uiStore;\n    const tagStore = store.tagStore;\n    const postsStore = store.postsStore;\n    tagStore.setActiveTag(query.tag);\n    let thread = await postsStore.getAndSetThread(query.id);\n\n    if (thread) {\n      query.title = thread.title;\n      query.tag = thread.sub;\n    }\n\n    uiStore.toggleSidebarStatus(true);\n    uiStore.toggleBannerStatus(true);\n    return {\n      query,\n      thread\n    };\n  }\n\n  async componentWillMount() {\n    this.props.tagStore.setActiveTag(this.props.query.tag);\n  }\n\n  render() {\n    let {\n      query: {\n        id,\n        tag,\n        title\n      },\n      thread\n    } = this.props;\n\n    if (!thread) {\n      return __jsx(\"span\", null, \"No posts found for specified thread: \", id);\n    }\n\n    thread = new ThreadModel(thread);\n    return __jsx(\"div\", {\n      className: 'thread-container'\n    }, __jsx(Head, null, __jsx(\"title\", null, title, \" - \", tag)), __jsx(Thread, {\n      opening: thread.openingPost,\n      openingModel: thread.rbModel(thread.openingPost),\n      getModel: thread.rbModel,\n      getRepliesFromMap: thread.getRepliesFromMap,\n      vote: thread.vote,\n      openingPostReplies: thread.openingPostReplies,\n      totalReplies: thread.totalReplies\n    }));\n  }\n\n}) || _class) || _class);\nexport default E;","map":null,"metadata":{},"sourceType":"module"}