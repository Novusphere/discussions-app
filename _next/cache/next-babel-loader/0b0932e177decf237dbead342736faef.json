{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar fetch = require('node-fetch');\n\nexport var DEFAULT_NSDB_ENDPOINT = 'https://atmosdb.novusphere.io';\nexport var NSDB =\n/*#__PURE__*/\nfunction () {\n  function NSDB() {\n    _classCallCheck(this, NSDB);\n\n    this.api = void 0;\n    this.api = DEFAULT_NSDB_ENDPOINT;\n  }\n\n  _createClass(NSDB, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(apiEndpoint) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.api = apiEndpoint;\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"cors\",\n    value: function () {\n      var _cors = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(url) {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"https://db.novusphere.io/service/cors/?\".concat(url));\n\n              case 2:\n                request = _context2.sent;\n                _context2.next = 5;\n                return request.text();\n\n              case 5:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function cors(_x2) {\n        return _cors.apply(this, arguments);\n      }\n\n      return cors;\n    }()\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(sq) {\n        var qs, request, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                qs = \"c=\".concat(sq.cursorId ? sq.cursorId : '', \"&\") + \"q=\".concat(sq.query ? JSON.stringify(sq.query) : '', \"&\") + \"s=\".concat(sq.sort ? JSON.stringify(sq.sort) : '', \"&\") + \"u=\".concat(sq.account ? sq.account : '', \"&\") + \"lim=\".concat(typeof sq.limit !== 'undefined' ? sq.limit : 20, \"&\") + \"p=\".concat(typeof sq.count !== 'undefined' ? sq.count : 0);\n                _context3.next = 3;\n                return fetch(\"\".concat(this.api, \"/discussions/search?\").concat(qs), {\n                  method: 'GET',\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'text/plain'\n                  }\n                });\n\n              case 3:\n                request = _context3.sent;\n                _context3.next = 6;\n                return request.json();\n\n              case 6:\n                result = _context3.sent;\n\n                if (!result.error) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                console.log(result);\n                throw new Error(result.error);\n\n              case 10:\n                sq.cursorId = result.cursorId;\n                sq.count = result.count;\n                sq.limit = result.limit;\n                sq.payload = result.payload;\n                return _context3.abrupt(\"return\", sq);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function search(_x3) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n  }]);\n\n  return NSDB;\n}();\n;","map":null,"metadata":{},"sourceType":"module"}