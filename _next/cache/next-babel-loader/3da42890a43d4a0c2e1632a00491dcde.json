{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport Select from 'react-select';\nimport { Editor } from \"./..\";\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.enterKeyEventListener = function (e) {\n      var key = e.code;\n\n      if (key.match(/NumpadEnter|Enter/)) {\n        e.preventDefault();\n\n        if (typeof _this.props.form !== 'undefined' && typeof _this.props.form.onSubmit !== 'undefined') {\n          _this.props.form.onSubmit(e);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('keypress', this.enterKeyEventListener);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('keypress', this.enterKeyEventListener);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          form = _this$props.form,\n          children = _this$props.children,\n          hideSubmitButton = _this$props.hideSubmitButton,\n          props = _objectWithoutProperties(_this$props, [\"form\", \"children\", \"hideSubmitButton\"]);\n\n      if (typeof form === 'undefined' || typeof form.fields === 'undefined') return null;\n\n      var renderButton = function renderButton(field, type, rest) {\n        if (Array.isArray(field.accessor.$extra.options)) {\n          return field.accessor.$extra.options.map(function (_ref) {\n            var value = _ref.value,\n                disabled = _ref.disabled,\n                title = _ref.title,\n                className = _ref.className,\n                _onClick = _ref.onClick;\n            return __jsx(\"button\", {\n              datatype: type,\n              onClick: function onClick(e) {\n                form.onSubmit(e);\n\n                if (_onClick) {\n                  _onClick(form.form);\n                }\n\n                e.preventDefault();\n              },\n              disabled: disabled || _onClick && _onClick['state'] && _onClick['state'] === 'pending' || false,\n              key: \"\".concat(field.name, \"-\").concat(value),\n              title: title || null,\n              className: classNames(['mt3 f6 link dim ph3 pv2 dib mr2 pointer', _defineProperty({\n                'white bg-green': !className\n              }, className, className)])\n            }, _onClick && _onClick['state'] && _onClick['state'] === 'pending' ? __jsx(FontAwesomeIcon, {\n              width: 13,\n              icon: faSpinner,\n              spin: true,\n              className: 'mr1'\n            }) : null, value);\n          });\n        }\n\n        return __jsx(\"button\", _extends({\n          datatype: type,\n          type: 'button',\n          key: field.accessor.value\n        }, rest, {\n          className: classNames({\n            'button button-light dim pointer db f6 pv1 mh1 flex-auto': true\n          })\n        }), field.accessor.value);\n      };\n\n      var renderFields = function renderFields(fields) {\n        return fields.map(function (field) {\n          var bind = field.accessor.bind();\n\n          if (field.accessor.$extra && field.accessor.$extra.render === false) {\n            return null;\n          }\n\n          switch (form.types[field.name]) {\n            case 'dropdown':\n              return __jsx(React.Fragment, {\n                key: field.name\n              }, __jsx(\"div\", {\n                className: 'field-container pb3 inline-labels'\n              }, !field.hideLabels && __jsx(\"label\", {\n                htmlFor: field.accessor.id,\n                className: 'w-40'\n              }, field.accessor.label), __jsx(\"div\", {\n                className: classNames(['w-60 flex flex-column', {\n                  'w-100': field.hideLabels\n                }])\n              }, __jsx(Select, _extends({\n                className: 'db f6 react-select-dropdown',\n                classNamePrefix: 'rs',\n                options: field.accessor.$extra.options\n              }, bind)), __jsx(\"span\", {\n                className: 'error f6 db pv2'\n              }, field.accessor.error))));\n\n            case 'textarea':\n              return __jsx(React.Fragment, {\n                key: field.name\n              }, __jsx(\"div\", {\n                className: 'field-container pb3 inline-labels'\n              }, !field.hideLabels && __jsx(\"label\", {\n                htmlFor: field.accessor.id,\n                className: 'w-40'\n              }, field.accessor.label), __jsx(\"div\", {\n                className: classNames(['w-60 flex flex-column', {\n                  'w-100': field.hideLabels\n                }])\n              }, __jsx(\"textarea\", _extends({\n                rows: \"4\",\n                cols: \"50\"\n              }, bind, {\n                className: 'db f6 form-input'\n              })), __jsx(\"span\", {\n                className: 'error f6 db pv2 tl'\n              }, field.accessor.error))));\n\n            case 'richtext':\n              return __jsx(React.Fragment, {\n                key: field.name\n              }, __jsx(\"div\", {\n                className: 'field-container pb3 inline-labels'\n              }, !field.hideLabels && __jsx(\"label\", {\n                htmlFor: field.accessor.id,\n                className: 'w-40'\n              }, field.accessor.label), __jsx(\"div\", {\n                className: classNames(['w-60 h-100 flex flex-column', {\n                  'w-100': field.hideLabels\n                }])\n              }, __jsx(Editor, _extends({\n                placeholder: field.placeholder,\n                className: 'db f6'\n              }, bind)), __jsx(\"span\", {\n                className: 'error f6 db pv2'\n              }, field.accessor.error))));\n\n            case 'button':\n              var _ref3 = bind,\n                  type = _ref3.type,\n                  rest = _objectWithoutProperties(_ref3, [\"type\"]);\n\n              return __jsx(\"div\", {\n                className: 'field-container pb3 db flex justify-end items-center',\n                key: field.name\n              }, __jsx(\"div\", {\n                className: classNames([{\n                  'w-80': !field.hideLabels,\n                  'w-100': field.hideLabels\n                }])\n              }, renderButton(field, type, rest)));\n\n            case 'radiogroup':\n              return __jsx(\"div\", {\n                key: field.name,\n                className: 'flex self-end w-80 mb3'\n              }, field.accessor.$extra.options.map(function (option) {\n                return __jsx(\"div\", {\n                  className: 'flex items-center',\n                  key: option.value\n                }, __jsx(\"input\", {\n                  type: 'radio',\n                  id: option.value,\n                  name: option.value,\n                  value: option.value,\n                  checked: field.accessor.value === option.value,\n                  onChange: function onChange(e) {\n                    field.accessor.onChange(e);\n\n                    if (option.onClick) {\n                      option.onClick(form);\n                    }\n                  }\n                }), __jsx(\"label\", {\n                  htmlFor: option.value,\n                  className: 'pl1 mr3 f6 lh-copy'\n                }, option.value));\n              }));\n\n            default:\n              return __jsx(React.Fragment, {\n                key: field.name\n              }, __jsx(\"div\", {\n                className: 'field-container pb3 inline-labels'\n              }, !field.hideLabels && __jsx(\"label\", {\n                htmlFor: field.accessor.id,\n                className: 'w-40'\n              }, field.accessor.label), __jsx(\"div\", {\n                className: classNames(['w-60 flex flex-column', {\n                  'w-100': field.hideLabels\n                }])\n              }, __jsx(\"input\", _extends({}, bind, {\n                className: 'db f6 form-input'\n              })), __jsx(\"span\", {\n                className: 'error f6 db pv2 tl'\n              }, field.accessor.error))));\n          }\n        });\n      };\n\n      return __jsx(\"form\", props, renderFields(form.fields), !hideSubmitButton && __jsx(\"button\", {\n        className: 'mt3 f6 link dim ph3 pv2 dib white bg-green pointer',\n        type: \"submit\",\n        onClick: form.onSubmit\n      }, \"Submit\"), children);\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nexport default observer(Form);","map":null,"metadata":{},"sourceType":"module"}