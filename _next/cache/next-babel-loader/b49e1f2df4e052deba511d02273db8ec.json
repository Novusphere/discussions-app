{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nlet Editor = (_dec = inject('postsStore'), _dec(_class = observer(_class = (_temp = class Editor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaded: false\n    };\n    this.turndownService = void 0;\n    this.quillBase = void 0;\n    this.modules = null;\n\n    this.onChange = text => {\n      const markdown = this.turndownService.turndown(text);\n      this.props.onChange(markdown);\n    };\n  }\n\n  async componentDidMount() {\n    /**\r\n     * This is how we get around SSR problems\r\n     * using async imports.\r\n     */\n    const quillEditor = await import('react-quill');\n    this.quillBase = {\n      Editor: quillEditor.default,\n      Quill: quillEditor.Quill\n    };\n    const mention = await import('quill-mention');\n    const Mention = mention.default;\n    const autoformat = await import(\"../../modules/quill-autoformat/dist/quill-autoformat.js\");\n    const Autoformat = autoformat.default;\n    const Hashtag = autoformat.Hashtag;\n    const turndownImport = await import('turndown');\n    const Turndown = turndownImport.default;\n    this.turndownService = new Turndown();\n    this.quillBase.Quill.register('modules/mention', Mention);\n    this.quillBase.Quill.register('modules/autoformat', Autoformat);\n    this.quillBase.Quill.register('formats/hashtag', Hashtag);\n    this.modules = {\n      mention: {\n        fixMentionsToQuill: true,\n        mentionDenotationChars: ['@'],\n        source: async (searchTerm, renderList, mentionChar) => {\n          const accounts = this.props.postsStore.getPossibleUsersToTag;\n          let values;\n\n          if (mentionChar === '@') {\n            values = accounts;\n          }\n\n          if (searchTerm.length === 0) {\n            renderList(values, searchTerm);\n          } else {\n            const matches = [];\n\n            for (let i = 0; i < values.length; i++) {\n              if (~values[i].value.toLowerCase().indexOf(searchTerm.toLowerCase())) {\n                matches.push(values[i]);\n              }\n            }\n\n            renderList(matches, searchTerm);\n          }\n        },\n        renderItem: item => {\n          const image = `<img width=20 height=20 src=\"data:image/png;base64,${item.icon}\" class=\"mention-list-icon\" />`;\n          return `<span class=\"mention-list-item\" title={${item.id}}>${image} <span>${item.value}</span></span>`;\n        },\n        onSelect: (item, insertItem) => {\n          item.value = `<a href=${window.location.origin}/u/${item.value}-${item.id}>@${item.value}</a>`;\n          item.denotationChar = '';\n          return insertItem(item);\n        }\n      },\n      autoformat: true\n    };\n    /**\r\n     * Set loaded to true at the end\r\n     * to ensure our component won't throw errors due to\r\n     * Quill SSR imports.\r\n     */\n\n    this.setState({\n      loaded: true\n    });\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return __jsx(FontAwesomeIcon, {\n        width: 13,\n        icon: faSpinner,\n        spin: true\n      });\n    }\n\n    const {\n      Editor\n    } = this.quillBase;\n    return __jsx(Editor, {\n      key: 'editor',\n      onChange: this.onChange,\n      formats: ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video', 'mention', 'hashtag'],\n      modules: {\n        autoformat: this.modules.autoformat,\n        mention: this.modules.mention\n      }\n    });\n  }\n\n}, _temp)) || _class) || _class);\nexport default Editor;","map":null,"metadata":{},"sourceType":"module"}