{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nvar Editor = (_dec = inject('postsStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  function Editor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Editor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false\n    };\n    _this.turndownService = void 0;\n    _this.quillBase = void 0;\n    _this.modules = null;\n\n    _this.onChange = function (text) {\n      var markdown = _this.turndownService.turndown(text);\n\n      _this.props.onChange(markdown);\n    };\n\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var quillEditor, mention, Mention, autoformat, Autoformat, Hashtag, turndownImport, Turndown;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return import('react-quill');\n\n              case 2:\n                quillEditor = _context2.sent;\n                this.quillBase = {\n                  Editor: quillEditor[\"default\"],\n                  Quill: quillEditor.Quill\n                };\n                _context2.next = 6;\n                return import('quill-mention');\n\n              case 6:\n                mention = _context2.sent;\n                Mention = mention[\"default\"];\n                _context2.next = 10;\n                return import(\"../../modules/quill-autoformat/dist/quill-autoformat.js\");\n\n              case 10:\n                autoformat = _context2.sent;\n                Autoformat = autoformat[\"default\"];\n                Hashtag = autoformat.Hashtag;\n                _context2.next = 15;\n                return import('turndown');\n\n              case 15:\n                turndownImport = _context2.sent;\n                Turndown = turndownImport[\"default\"];\n                this.turndownService = new Turndown();\n                this.quillBase.Quill.register('modules/mention', Mention);\n                this.quillBase.Quill.register('modules/autoformat', Autoformat);\n                this.quillBase.Quill.register('formats/hashtag', Hashtag);\n                this.modules = {\n                  mention: {\n                    fixMentionsToQuill: true,\n                    mentionDenotationChars: ['@'],\n                    source: function () {\n                      var _source = _asyncToGenerator(\n                      /*#__PURE__*/\n                      _regeneratorRuntime.mark(function _callee(searchTerm, renderList, mentionChar) {\n                        var accounts, values, matches, i;\n                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                accounts = _this2.props.postsStore.getPossibleUsersToTag;\n\n                                if (mentionChar === '@') {\n                                  values = accounts;\n                                }\n\n                                if (searchTerm.length === 0) {\n                                  renderList(values, searchTerm);\n                                } else {\n                                  matches = [];\n\n                                  for (i = 0; i < values.length; i++) {\n                                    if (~values[i].value.toLowerCase().indexOf(searchTerm.toLowerCase())) {\n                                      matches.push(values[i]);\n                                    }\n                                  }\n\n                                  renderList(matches, searchTerm);\n                                }\n\n                              case 3:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                      function source(_x, _x2, _x3) {\n                        return _source.apply(this, arguments);\n                      }\n\n                      return source;\n                    }(),\n                    renderItem: function renderItem(item) {\n                      var image = \"<img width=20 height=20 src=\\\"data:image/png;base64,\".concat(item.icon, \"\\\" class=\\\"mention-list-icon\\\" />\");\n                      return \"<span class=\\\"mention-list-item\\\" title={\".concat(item.id, \"}>\").concat(image, \" <span>\").concat(item.value, \"</span></span>\");\n                    },\n                    onSelect: function onSelect(item, insertItem) {\n                      item.value = \"<a href=\".concat(window.location.origin, \"/u/\").concat(item.value, \"-\").concat(item.id, \">@\").concat(item.value, \"</a>\");\n                      item.denotationChar = '';\n                      return insertItem(item);\n                    }\n                  },\n                  autoformat: true\n                };\n                /**\r\n                 * Set loaded to true at the end\r\n                 * to ensure our component won't throw errors due to\r\n                 * Quill SSR imports.\r\n                 */\n\n                this.setState({\n                  loaded: true\n                });\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.loaded) {\n        return __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        });\n      }\n\n      var Editor = this.quillBase.Editor;\n      return __jsx(Editor, {\n        key: 'editor',\n        onChange: this.onChange,\n        formats: ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video', 'mention', 'hashtag'],\n        modules: {\n          autoformat: this.modules.autoformat,\n          mention: this.modules.mention\n        }\n      });\n    }\n  }]);\n\n  return Editor;\n}(React.Component), _temp)) || _class) || _class);\nexport default Editor;","map":null,"metadata":{},"sourceType":"module"}