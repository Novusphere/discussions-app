{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { discussions } from \"../../novusphere-js\";\nimport PostPreview from \"../../components/post-preview/post-preview\";\nimport { inject, observer } from 'mobx-react';\nimport { pushToThread } from \"../../utils\";\nlet Index = (_dec = inject('tagStore', 'postsStore'), _dec(_class = observer(_class = (_temp = class Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clickPost = post => {\n      pushToThread(post);\n    };\n\n    this.renderPosts = () => {\n      const {\n        searchResult\n      } = this.props;\n\n      if (!searchResult.length || !searchResult) {\n        return __jsx(\"span\", {\n          className: 'f6'\n        }, \"No results found\");\n      }\n\n      return searchResult.filter(result => result.tags[0].length).map(result => __jsx(PostPreview, {\n        key: result.id,\n        post: result,\n        onClick: this.clickPost,\n        tag: this.props.tagStore.tags.get(result.sub),\n        disableVoteHandler: true\n      }));\n    };\n  }\n\n  static async getInitialProps({\n    query,\n    store\n  }) {\n    const searchValue = query.q;\n    const postsStore = store.postsStore;\n    postsStore.resetPositionAndPosts();\n    const searchResult = await discussions.getPostsForSearch(searchValue);\n    return {\n      searchValue,\n      searchResult\n    };\n  }\n\n  componentWillMount() {\n    this.props.tagStore.destroyActiveTag();\n  }\n\n  render() {\n    const {\n      searchValue,\n      searchResult\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: 'card pa4 mb3'\n    }, __jsx(\"span\", {\n      className: 'black f5'\n    }, \"Showing results for: \", __jsx(\"span\", {\n      className: 'b'\n    }, searchValue)), __jsx(\"span\", {\n      className: 'f5 pl2'\n    }, \"(\", searchResult.length, \" results)\")), this.renderPosts());\n  }\n\n}, _temp)) || _class) || _class);\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}