{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { REDDIT_URL } from \"./attachment\";\nimport { RedditService } from \"./service/reddit\";\n\nvar Thread =\n/*#__PURE__*/\nfunction () {\n  function Thread() {\n    _classCallCheck(this, Thread);\n\n    this.openingPost = void 0;\n    this.map = void 0;\n  }\n\n  _createClass(Thread, [{\n    key: \"init\",\n    value: function init(posts) {\n      this.map = {};\n      if (posts.length == 0) return new Error('Cannot create thread with zero posts');\n      var threadUuid = posts[0].threadUuid;\n      this.openingPost = posts.find(function (p) {\n        return p.uuid == threadUuid;\n      });\n      if (!this.openingPost) return new Error('No opening post found!');\n\n      for (var i = 0; i < posts.length; i++) {\n        var p = posts[i];\n        if (p.uuid in this.map) continue; //if (!p.edit) {\n\n        if (this.map[p.uuid] == undefined) {\n          this.map[p.uuid] = p;\n        } //} else if (p.parentUuid) {\n        //    const parent = this.map[p.parentUuid]\n        //    if (parent) {\n        //        parent.applyEdit(p)\n        //    }\n        //}\n\n      }\n    }\n  }, {\n    key: \"importRedditReplies\",\n    value: function () {\n      var _importRedditReplies = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, r, rs, redditPosts, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.openingPost) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                if (this.openingPost.attachment.value) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                if (this.openingPost.attachment.value.match(REDDIT_URL)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                url = this.openingPost.attachment.value.split('/');\n                r = url.findIndex(function (p) {\n                  return p == 'r';\n                });\n\n                if (!(r > -1)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                rs = new RedditService();\n                _context.next = 12;\n                return rs.getThread(this.openingPost, url[r + 1], url[r + 3]);\n\n              case 12:\n                redditPosts = _context.sent;\n\n                if (redditPosts.length > 0) {\n                  for (i = 1; i < redditPosts.length; i++) {\n                    this.map[redditPosts[i].uuid] = redditPosts[i];\n                  }\n\n                  this.openingPost.uuid = redditPosts[0].uuid;\n                }\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function importRedditReplies() {\n        return _importRedditReplies.apply(this, arguments);\n      }\n\n      return importRedditReplies;\n    }()\n  }, {\n    key: \"normalize\",\n    value: function () {\n      var _normalize = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var posts, uuid, post, parent;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.openingPost) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.next = 4;\n                return this.importRedditReplies();\n\n              case 4:\n                posts = []; // build the thread\n\n                for (uuid in this.map) {\n                  post = this.map[uuid];\n\n                  if (post.parentUuid) {\n                    parent = this.map[post.parentUuid];\n\n                    if (parent) {\n                      post.depth = parent.depth + 1;\n                      parent.replies.push(post);\n                    }\n                  }\n\n                  posts.push(post);\n                } // wait for normalization\n\n\n                _context2.next = 8;\n                return Promise.all(posts.map(function (p) {\n                  return p.normalize();\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function normalize() {\n        return _normalize.apply(this, arguments);\n      }\n\n      return normalize;\n    }()\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this.openingPost ? this.openingPost.title : undefined;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this.openingPost ? this.openingPost.uuid : undefined;\n    }\n  }, {\n    key: \"totalReplies\",\n    get: function get() {\n      return this.openingPost ? this.openingPost.totalReplies : 0;\n    }\n  }]);\n\n  return Thread;\n}();\n\nexport { Thread as default };","map":null,"metadata":{},"sourceType":"module"}