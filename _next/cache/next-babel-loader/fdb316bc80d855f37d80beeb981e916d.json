{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Router from 'next/router';\nimport Link from 'next/link';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faSearch, faSpinner, faUserCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Tooltip } from 'react-tippy';\nimport { ModalOptions } from \"../../constants/globals\";\nimport { UserNotifications } from \"./..\";\nvar TitleHeader = (_dec = inject('tagStore', 'newAuthStore', 'uiStore', 'notificationsStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TitleHeader, _React$Component);\n\n  function TitleHeader() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TitleHeader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TitleHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      search: ''\n    };\n\n    _this.renderUserSettings = function () {\n      var logOut = _this.props.newAuthStore.logOut;\n      return __jsx(\"div\", {\n        className: 'tooltip',\n        style: {\n          width: 200\n        }\n      }, __jsx(Link, {\n        href: '/settings'\n      }, __jsx(\"a\", {\n        rel: 'Open settings',\n        className: 'db mb2'\n      }, \"settings\")), __jsx(\"a\", {\n        title: 'ATMOS Balance',\n        className: 'db mb2'\n      }, \"0 ATMOS\"), __jsx(\"a\", {\n        rel: 'Open settings',\n        className: 'db pointer',\n        onClick: function onClick() {\n          logOut();\n        }\n      }, logOut['match']({\n        pending: function pending() {\n          return __jsx(FontAwesomeIcon, {\n            width: 13,\n            icon: faSpinner,\n            spin: true\n          });\n        },\n        rejected: function rejected() {\n          return 'Unable to disconnect';\n        },\n        resolved: function resolved() {\n          return 'disconnect';\n        }\n      })));\n    };\n\n    _this.renderAuthActions = function () {\n      var notificationsStore = _this.props.notificationsStore;\n      var showModal = _this.props.uiStore.showModal;\n      var _this$props$newAuthSt = _this.props.newAuthStore,\n          hasAccount = _this$props$newAuthSt.hasAccount,\n          getActiveDisplayName = _this$props$newAuthSt.getActiveDisplayName,\n          checkInitialConditions = _this$props$newAuthSt.checkInitialConditions;\n\n      if (checkInitialConditions['pending']) {\n        return __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        });\n      }\n\n      if (hasAccount) {\n        var hasNotifications = notificationsStore.hasNotifications,\n            notificationCount = notificationsStore.notificationCount;\n        return __jsx(\"div\", {\n          className: 'f4 flex items-center'\n        }, __jsx(Tooltip, {\n          animateFill: false,\n          interactive: true,\n          interactiveBorder: 20,\n          unmountHTMLWhenHide: true,\n          html: __jsx(UserNotifications, {\n            notificationsStore: notificationsStore\n          }),\n          position: 'bottom-end',\n          trigger: 'mouseenter'\n        }, __jsx(Link, {\n          href: '/notifications'\n        }, __jsx(\"a\", {\n          rel: 'Open your notifications'\n        }, __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faBell,\n          className: 'ph2',\n          color: hasNotifications ? '#ad3b2b' : '#7D8894'\n        }), hasNotifications && __jsx(\"span\", {\n          className: 'f5 b notification-count'\n        }, notificationCount)))), __jsx(Link, {\n          href: \"/new\"\n        }, __jsx(\"button\", {\n          title: 'Create new post',\n          className: 'ml3'\n        }, __jsx(\"span\", {\n          className: 'f6 white'\n        }, \"New Post\"))), __jsx(Tooltip, {\n          animateFill: false,\n          interactive: true,\n          html: _this.renderUserSettings(),\n          position: 'bottom-end',\n          trigger: 'mouseenter'\n        }, __jsx(Link, {\n          href: {\n            pathname: '/u',\n            query: {\n              username: getActiveDisplayName\n            }\n          },\n          as: \"/u/\".concat(getActiveDisplayName)\n        }, __jsx(\"a\", {\n          rel: 'Open your profile',\n          className: 'flex items-center user-container pointer dim'\n        }, __jsx(\"span\", {\n          className: 'b f6 pl1 pr3 black'\n        }, getActiveDisplayName), __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faUserCircle,\n          color: '#7D8894'\n        })))));\n      }\n\n      return __jsx(React.Fragment, null, __jsx(\"button\", {\n        className: 'button-outline mr2',\n        onClick: function onClick() {\n          return showModal(ModalOptions.signIn);\n        }\n      }, \"Login\"), __jsx(\"button\", {\n        onClick: function onClick() {\n          showModal(ModalOptions.signUp);\n        }\n      }, \"Sign Up\"));\n    };\n\n    _this.renderActiveTag = function () {\n      var _this$props$tagStore = _this.props.tagStore,\n          setActiveTag = _this$props$tagStore.setActiveTag,\n          activeTag = _this$props$tagStore.activeTag;\n\n      if (!activeTag) {\n        return __jsx(Link, {\n          href: '/'\n        }, __jsx(\"a\", null, \"home\"));\n      }\n\n      return setActiveTag['match']({\n        pending: function pending() {\n          return __jsx(FontAwesomeIcon, {\n            width: 13,\n            icon: faSpinner,\n            spin: true\n          });\n        },\n        rejected: function rejected() {\n          return __jsx(Link, {\n            href: '/'\n          }, __jsx(\"a\", null, \"home\"));\n        },\n        resolved: function resolved(tagModel) {\n          return __jsx(Link, {\n            href: tagModel.url\n          }, __jsx(\"a\", {\n            className: 'flex items-center'\n          }, !tagModel.icon ? null : __jsx(\"img\", {\n            className: 'tag-icon pr2',\n            src: tagModel.icon,\n            alt: \"\".concat(tagModel.name, \" icon\")\n          }), __jsx(\"span\", null, tagModel.name)));\n        }\n      });\n    };\n\n    _this.handleKeySearch = function (e) {\n      var key = e.key;\n\n      if (key.match(/NumpadEnter|Enter/)) {\n        var value = e.target.value;\n        Router.push({\n          pathname: '/search',\n          query: {\n            q: value\n          }\n        });\n        e.preventDefault();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TitleHeader, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: 'title-header flex items-center z-999'\n      }, __jsx(\"div\", {\n        className: 'container flex items-center justify-between'\n      }, __jsx(\"span\", {\n        className: 'f4 black'\n      }, this.renderActiveTag()), __jsx(\"div\", {\n        className: 'mh4 flex-auto relative flex items-center'\n      }, __jsx(\"input\", {\n        className: 'w-100 main-search pl4',\n        placeholder: 'Search on Discussions.app',\n        onKeyDown: this.handleKeySearch\n      }), __jsx(FontAwesomeIcon, {\n        width: 13,\n        icon: faSearch,\n        className: 'absolute left-0 ml2 pl1'\n      })), __jsx(\"div\", {\n        className: 'flex'\n      }, this.renderAuthActions())));\n    }\n  }]);\n\n  return TitleHeader;\n}(React.Component), _temp)) || _class) || _class);\nexport default TitleHeader;","map":null,"metadata":{},"sourceType":"module"}