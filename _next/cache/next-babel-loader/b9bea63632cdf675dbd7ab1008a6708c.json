{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n// https://www.reddit.com/prefs/apps\n// https://github.com/JubbeArt/removeddit/blob/master/src/api/reddit/auth.js\n// https://api.pushshift.io/reddit/search/comment?sort=asc&link_id=....&limit=10000\n// https://api.pushshift.io/reddit/search/submission?ids=....\nvar fetch = require('node-fetch');\n\nimport { Post } from \"../post\"; //import { AttachmentType, AttachmentDisplay, Attachment } from \"../attachment\";\n\nvar clientId = 'Gu4d7t1AglWJVg';\nvar token = undefined;\n\nvar toBase36 = function toBase36(number) {\n  return parseInt(number, 10).toString(36);\n};\n\nvar toBase10 = function toBase10(numberString) {\n  return parseInt(numberString, 36);\n}; // Reddits way of indicating that something is deleted (the '\\\\' is for Reddit and the other is for pushshift)\n\n\nexport var isDeleted = function isDeleted(textBody) {\n  return textBody === '\\\\[deleted\\\\]' || textBody === '[deleted]';\n}; // Reddits way of indicating that something is deleted\n\nexport var isRemoved = function isRemoved(textBody) {\n  return textBody === '\\\\[removed\\\\]' || textBody === '[removed]';\n};\nexport var RedditService =\n/*#__PURE__*/\nfunction () {\n  function RedditService() {\n    _classCallCheck(this, RedditService);\n  }\n\n  _createClass(RedditService, [{\n    key: \"redditDataToPost\",\n    value: function redditDataToPost(data) {\n      var p = new Post('reddit');\n      p.id = toBase10(data.id);\n      p.transaction = data.id;\n      p.uuid = 'reddit-' + data.id;\n\n      if (data.parent_id) {\n        p.parentUuid = 'reddit-' + data.parent_id.substring(3);\n      }\n\n      p.poster = data.author;\n      p.title = data.title;\n      p.content = data.selftext || data.body;\n      p.createdAt = new Date(data.created_utc * 1000);\n      p.upvotes = data.ups;\n      return p;\n    }\n  }, {\n    key: \"getThread\",\n    value: function () {\n      var _getThread = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(owner, subreddit, threadId) {\n        var posts, auth, response, json, replies, children, i, child, _i;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(subreddit + ' ' + threadId);\n                posts = [];\n                _context.next = 4;\n                return this.getAuth();\n\n              case 4:\n                auth = _context.sent;\n                _context.next = 7;\n                return fetch(\"https://oauth.reddit.com/r/\".concat(subreddit, \"/comments/\").concat(threadId, \"/_/\"), auth);\n\n              case 7:\n                response = _context.sent;\n                _context.next = 10;\n                return response.json();\n\n              case 10:\n                json = _context.sent;\n                posts.push(this.redditDataToPost(json[0].data.children[0].data));\n                replies = [json[1].data.children];\n\n                while (replies.length > 0) {\n                  children = replies.shift();\n\n                  for (i = 0; i < children.length; i++) {\n                    child = children[i].data;\n                    posts.push(this.redditDataToPost(child));\n\n                    if (child.replies) {\n                      replies.unshift(child.replies.data.children);\n                    }\n                  }\n                }\n\n                for (_i = 0; _i < posts.length; _i++) {\n                  posts[_i].sub = owner.sub;\n                  posts[_i].threadUuid = owner.threadUuid;\n                }\n\n                return _context.abrupt(\"return\", posts);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getThread(_x, _x2, _x3) {\n        return _getThread.apply(this, arguments);\n      }\n\n      return getThread;\n    }()\n  }, {\n    key: \"getThreadPushShift\",\n    value: function () {\n      var _getThreadPushShift = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(subreddit, threadId) {\n        var post, removedPost, pushshiftComments, ids, redditComments, redditCommentLookup, removed, deleted;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getPost(subreddit, threadId);\n\n              case 2:\n                post = _context2.sent;\n\n                if (!(isDeleted(post.selftext) || isRemoved(post.selftext))) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.getPostPushShift(threadId);\n\n              case 6:\n                removedPost = _context2.sent;\n\n                if (isRemoved(post.selftext)) {\n                  removedPost.removed = true;\n                } else {\n                  removedPost.deleted = true;\n                }\n\n              case 8:\n                _context2.next = 10;\n                return this.getCommentsPushShift(threadId);\n\n              case 10:\n                pushshiftComments = _context2.sent;\n                // Extract ids from pushshift response\n                ids = pushshiftComments.map(function (comment) {\n                  return comment.id;\n                }); // Get all the comments from reddit\n\n                _context2.next = 14;\n                return this.getComments(ids);\n\n              case 14:\n                redditComments = _context2.sent;\n                // Temporary lookup for updating score\n                redditCommentLookup = {};\n                redditComments.forEach(function (comment) {\n                  redditCommentLookup[comment.id] = comment;\n                }); // Replace pushshift score with reddit (its usually more accurate)\n\n                pushshiftComments.forEach(function (comment) {\n                  var redditComment = redditCommentLookup[comment.id];\n\n                  if (redditComment !== undefined) {\n                    comment.score = redditComment.score;\n                  }\n                });\n                removed = [];\n                deleted = []; // Check what as removed / deleted according to reddit\n\n                redditComments.forEach(function (comment) {\n                  if (isRemoved(comment.body)) {\n                    removed.push(comment.id);\n                  } else if (isDeleted(comment.body)) {\n                    deleted.push(comment.id);\n                  }\n                });\n                return _context2.abrupt(\"return\", {\n                  comments: pushshiftComments,\n                  removed: removed,\n                  deleted: deleted\n                });\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getThreadPushShift(_x4, _x5) {\n        return _getThreadPushShift.apply(this, arguments);\n      }\n\n      return getThreadPushShift;\n    }()\n  }, {\n    key: \"getAuth\",\n    value: function () {\n      var _getAuth = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getToken();\n\n              case 2:\n                token = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  headers: {\n                    Authorization: \"bearer \".concat(token)\n                  }\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAuth() {\n        return _getAuth.apply(this, arguments);\n      }\n\n      return getAuth;\n    }()\n  }, {\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var tokenInit, response, json;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!token) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", token);\n\n              case 2:\n                // Headers for getting reddit api token\n                tokenInit = {\n                  headers: {\n                    Authorization: \"Basic \".concat(window.btoa(\"\".concat(clientId, \":\"))),\n                    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n                  },\n                  method: 'POST',\n                  body: \"grant_type=\".concat(encodeURIComponent('https://oauth.reddit.com/grants/installed_client'), \"&device_id=DO_NOT_TRACK_THIS_DEVICE\")\n                };\n                _context4.next = 5;\n                return fetch('https://www.reddit.com/api/v1/access_token', tokenInit);\n\n              case 5:\n                response = _context4.sent;\n                _context4.next = 8;\n                return response.json();\n\n              case 8:\n                json = _context4.sent;\n                token = json.access_token;\n                return _context4.abrupt(\"return\", token || '');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getToken() {\n        return _getToken.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n  }, {\n    key: \"getPost\",\n    value: function () {\n      var _getPost = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(subreddit, threadId) {\n        var auth, response, json;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getAuth();\n\n              case 2:\n                auth = _context5.sent;\n                _context5.next = 5;\n                return fetch(\"https://oauth.reddit.com/r/\".concat(subreddit, \"/comments/\").concat(threadId, \"/_/\"), auth);\n\n              case 5:\n                response = _context5.sent;\n                _context5.next = 8;\n                return response.json();\n\n              case 8:\n                json = _context5.sent;\n                return _context5.abrupt(\"return\", json);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getPost(_x6, _x7) {\n        return _getPost.apply(this, arguments);\n      }\n\n      return getPost;\n    }()\n  }, {\n    key: \"getPostPushShift\",\n    value: function () {\n      var _getPostPushShift = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(threadId) {\n        var elasticQuery, response, json, post;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                elasticQuery = {\n                  query: {\n                    term: {\n                      id: toBase10(threadId)\n                    }\n                  }\n                };\n                _context6.next = 3;\n                return fetch('https://elastic.pushshift.io/rs/submissions/_search?source=' + JSON.stringify(elasticQuery));\n\n              case 3:\n                response = _context6.sent;\n                _context6.next = 6;\n                return response.json();\n\n              case 6:\n                json = _context6.sent;\n                post = json.hits.hits[0]._source;\n                post.id = toBase36(post.id);\n                return _context6.abrupt(\"return\", post);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getPostPushShift(_x8) {\n        return _getPostPushShift.apply(this, arguments);\n      }\n\n      return getPostPushShift;\n    }()\n  }, {\n    key: \"getComments\",\n    value: function () {\n      var _getComments = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(commentIds) {\n        var auth, promises, _loop, i;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getAuth();\n\n              case 2:\n                auth = _context8.sent;\n                promises = [];\n\n                _loop = function _loop(i) {\n                  var ids = commentIds.slice(i, i + 100);\n                  promises.push(new Promise(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee7(resolve) {\n                      var response, json, commentsData;\n                      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              _context7.next = 2;\n                              return fetch(\"https://oauth.reddit.com/api/info?id=\".concat(ids.map(function (id) {\n                                return \"t1_\".concat(id);\n                              }).join()), auth);\n\n                            case 2:\n                              response = _context7.sent;\n                              _context7.next = 5;\n                              return response.json();\n\n                            case 5:\n                              json = _context7.sent;\n                              commentsData = json.data.children;\n                              return _context7.abrupt(\"return\", resolve(commentsData.map(function (commentData) {\n                                return commentData.data;\n                              })));\n\n                            case 8:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }, _callee7);\n                    }));\n\n                    return function (_x10) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }()));\n                };\n\n                for (i = 0; i < commentIds.length; i += 100) {\n                  _loop(i);\n                }\n\n                _context8.next = 8;\n                return Promise.all(promises);\n\n              case 8:\n                _context8.t0 = function (a, v) {\n                  return a.concat(v);\n                };\n\n                _context8.t1 = [];\n                return _context8.abrupt(\"return\", _context8.sent.reduce(_context8.t0, _context8.t1));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getComments(_x9) {\n        return _getComments.apply(this, arguments);\n      }\n\n      return getComments;\n    }()\n  }, {\n    key: \"getCommentsPushShift\",\n    value: function () {\n      var _getCommentsPushShift = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(threadId) {\n        var elasticQuery, response, json, comments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                elasticQuery = {\n                  query: {\n                    match: {\n                      link_id: toBase10(threadId)\n                    }\n                  },\n                  size: 20000,\n                  _source: ['author', 'body', 'created_utc', 'parent_id', 'score', 'subreddit', 'link_id']\n                };\n                _context9.next = 3;\n                return fetch('https://elastic.pushshift.io/rc/comments/_search?source=' + JSON.stringify(elasticQuery));\n\n              case 3:\n                response = _context9.sent;\n                _context9.next = 6;\n                return response.json();\n\n              case 6:\n                json = _context9.sent;\n                comments = json.hits.hits;\n                return _context9.abrupt(\"return\", comments.map(function (comment) {\n                  comment._source.id = toBase36(comment._id);\n                  comment._source.link_id = toBase36(comment._source.link_id); // Missing parent id === direct reply to thread\n\n                  if (!comment._source.parent_id) {\n                    comment._source.parent_id = threadId;\n                  } else {\n                    comment._source.parent_id = toBase36(comment._source.parent_id);\n                  }\n\n                  return comment._source;\n                }));\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function getCommentsPushShift(_x11) {\n        return _getCommentsPushShift.apply(this, arguments);\n      }\n\n      return getCommentsPushShift;\n    }()\n  }]);\n\n  return RedditService;\n}();","map":null,"metadata":{},"sourceType":"module"}