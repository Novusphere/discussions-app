{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nexport var YOUTUBE_URL = /https?:\\/\\/(www\\.)?youtu(\\.)?be(\\.com)?\\//i;\nexport var IMGUR_IMG_URL = /https?:\\/\\/(www\\.)?i\\.imgur\\.com\\//i;\nexport var REDDIT_URL = /https?:\\/\\/(www\\.)?reddit\\.com\\//i;\nexport var TWITTER_URL = /https?:\\/\\/(www\\.)?twitter\\.com\\//i;\nexport var DTUBE_URL = /https?:\\/\\/(www\\.)?d\\.tube\\//;\nexport var SOUNDCLOUD_URL = /https?:\\/\\/(www\\.)?soundcloud\\.com\\//;\nexport var BITCHUTE_URL = /https?:\\/\\/(www\\.)?bitchute\\.com\\//;\nexport var TRYBE_URL = /https?:\\/\\/(www\\.)?trybe\\.one\\//;\nexport var WHALESHARES_URL = /https?:\\/\\/(www\\.)?whaleshares\\.io\\//;\nexport var STEEMIT_URL = /https?:\\/\\/(www\\.)?steemit\\.com\\//;\nexport var IMAGE_TYPES = /\\.(png|jpg|jpeg|gif)$/i;\nimport { nsdb } from \"../index\";\nexport var AttachmentType;\n\n(function (AttachmentType) {\n  AttachmentType[\"Undefined\"] = \"\";\n  AttachmentType[\"IPFS\"] = \"ipfs\";\n  AttachmentType[\"Url\"] = \"url\";\n  AttachmentType[\"Text\"] = \"text\";\n})(AttachmentType || (AttachmentType = {}));\n\nexport var AttachmentDisplay;\n\n(function (AttachmentDisplay) {\n  AttachmentDisplay[\"Undefined\"] = \"\";\n  AttachmentDisplay[\"HTML\"] = \"html\";\n  AttachmentDisplay[\"Markdown\"] = \"md\";\n  AttachmentDisplay[\"Link\"] = \"link\";\n  AttachmentDisplay[\"IFrame\"] = \"iframe\";\n  AttachmentDisplay[\"MP4\"] = \"mp4\";\n  AttachmentDisplay[\"Image\"] = \"img\";\n})(AttachmentDisplay || (AttachmentDisplay = {}));\n\nexport var Attachment =\n/*#__PURE__*/\nfunction () {\n  _createClass(Attachment, [{\n    key: \"setFromOEmbed\",\n    value: function () {\n      var _setFromOEmbed = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(url) {\n        var oembed;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.t0 = JSON;\n                _context.next = 4;\n                return nsdb.cors(url);\n\n              case 4:\n                _context.t1 = _context.sent;\n                oembed = _context.t0.parse.call(_context.t0, _context.t1);\n                this.trust_provider = oembed.provider_url;\n                this.value = oembed.html;\n                this.type = AttachmentType.Text;\n                this.display = AttachmentDisplay.HTML;\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t2 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\");\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      function setFromOEmbed(_x) {\n        return _setFromOEmbed.apply(this, arguments);\n      }\n\n      return setFromOEmbed;\n    }()\n  }, {\n    key: \"isNormalizedImage\",\n    value: function isNormalizedImage() {\n      if (this.type == AttachmentType.Url) {\n        if (this.value.match(IMAGE_TYPES)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"normalize\",\n    value: function () {\n      var _normalize = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var vid;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.value) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                if (!(this.type == AttachmentType.IPFS)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.type = AttachmentType.Url;\n                this.value = 'https://gateway.ipfs.io/ipfs/' + this.value;\n                _context2.next = 35;\n                break;\n\n              case 7:\n                if (!(this.type == AttachmentType.Url)) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                if (!this.value.match(YOUTUBE_URL)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.setFromOEmbed(\"https://www.youtube.com/oembed?format=json&url=\".concat(this.value));\n\n              case 11:\n                _context2.next = 34;\n                break;\n\n              case 13:\n                if (!this.value.match(TWITTER_URL)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 16;\n                return this.setFromOEmbed(\"https://publish.twitter.com/oembed?format=json&url=\".concat(this.value));\n\n              case 16:\n                _context2.next = 34;\n                break;\n\n              case 18:\n                if (!this.value.match(DTUBE_URL)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.next = 21;\n                return this.setFromOEmbed(\"https://api.d.tube/oembed?url=\".concat(this.value.replace('/#!/', '/')));\n\n              case 21:\n                _context2.next = 34;\n                break;\n\n              case 23:\n                if (!this.value.match(REDDIT_URL)) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                _context2.next = 26;\n                return this.setFromOEmbed(\"https://www.reddit.com/oembed?url=\".concat(this.value));\n\n              case 26:\n                _context2.next = 34;\n                break;\n\n              case 28:\n                if (!this.value.match(SOUNDCLOUD_URL)) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                _context2.next = 31;\n                return this.setFromOEmbed(\"https://soundcloud.com/oembed?format=json&url=\".concat(this.value));\n\n              case 31:\n                _context2.next = 34;\n                break;\n\n              case 33:\n                if (this.value.match(BITCHUTE_URL)) {\n                  vid = this.value.match(/video\\/[a-zA-Z0-9]+/);\n\n                  if (vid && vid.length > 0) {\n                    this.value = 'https://www.bitchute.com/embed/' + vid[0].substring(6);\n                    this.display = AttachmentDisplay.IFrame;\n                  }\n                } else if (this.isNormalizedImage()) {\n                  this.display = AttachmentDisplay.Image;\n                }\n\n              case 34:\n                // TO-DO: inliners (trybe, steem, etc.)\n                // always HTTPS iframe, HTTP will be rejeted by most browsers\n                if (this.display == AttachmentDisplay.IFrame) {\n                  if (this.value.indexOf('http:') == 0) {\n                    this.value = 'https:' + this.value.substring(5);\n                  }\n                }\n\n              case 35:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function normalize() {\n        return _normalize.apply(this, arguments);\n      }\n\n      return normalize;\n    }()\n  }]);\n\n  function Attachment() {\n    _classCallCheck(this, Attachment);\n\n    this.value = void 0;\n    this.type = void 0;\n    this.display = void 0;\n    this.trust_provider = void 0;\n    this.value = '';\n    this.type = AttachmentType.Undefined;\n    this.display = AttachmentDisplay.Undefined;\n  }\n\n  return Attachment;\n}();","map":null,"metadata":{},"sourceType":"module"}