{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Feed } from \"../../components\";\nimport { pushToThread } from \"../../utils\";\nimport Head from 'next/head';\n// TODO: Merge logic between e/page and tag/page. Right now it's separated.\nlet Tag = (_dec = inject('tagStore', 'postsStore'), _dec(_class = observer(_class = (_temp = class Tag extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clickPost = post => {\n      pushToThread(post);\n    };\n  }\n\n  static async getInitialProps({\n    query,\n    store\n  }) {\n    const tag = query.name;\n    const postsStore = store.postsStore;\n    const tagStore = store.tagStore;\n\n    if (tagStore.activeTag && tagStore.activeTag.name !== tag) {\n      postsStore.resetPositionAndPosts();\n      tagStore.setActiveTag(tag);\n    }\n\n    const feed = await postsStore.getPostsByTag([tag]);\n    return {\n      tagName: tag,\n      feed: feed\n    };\n  }\n\n  componentWillMount() {\n    this.props.tagStore.setActiveTag(this.props.tagName);\n  }\n\n  render() {\n    const {\n      clickPost,\n      props: {\n        postsStore,\n        tagStore,\n        feed,\n        tagName\n      }\n    } = this;\n\n    if (!feed || !feed.length) {\n      return __jsx(\"span\", null, \"No posts found for specified tag: \", tagName);\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, tagName)), __jsx(Feed, {\n      threads: postsStore.feedThreads,\n      onClick: clickPost,\n      tagModel: tagStore.activeTag\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}