{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { PostPreview } from \"../../components\";\nimport { pushToThread } from \"../../utils\";\n// TODO: Real-data\nlet Notifications = (_dec = inject('notificationsStore', 'tagStore'), _dec(_class = observer(_class = (_temp = class Notifications extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderNotifications = () => {\n      return this.props.notificationsStore.fetchNotificationsAsFeed['match']({\n        pending: () => __jsx(FontAwesomeIcon, {\n          width: 13,\n          icon: faSpinner,\n          spin: true\n        }),\n        rejected: () => 'Something went wrong fetching notifications',\n        resolved: notifications => {\n          return notifications.map(notification => {\n            return __jsx(PostPreview, {\n              disableVoteHandler: true,\n              key: notification.uuid,\n              post: notification,\n              onClick: () => pushToThread(notification),\n              tag: this.props.tagStore.tags.get(notification.sub)\n            });\n          });\n        }\n      });\n    };\n  }\n\n  static async getInitialProps({\n    store\n  }) {\n    const uiStore = store.uiStore;\n    const tagStore = store.tagStore;\n    uiStore.toggleSidebarStatus(true); // uiStore.hideBanner()\n\n    tagStore.destroyActiveTag();\n    return {};\n  }\n\n  componentDidMount() {\n    this.props.notificationsStore.fetchNotificationsAsFeed();\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: 'card pa4 mb3'\n    }, __jsx(\"span\", {\n      className: 'black f5'\n    }, \"Viewing all your notifications\")), this.renderNotifications());\n  }\n\n}, _temp)) || _class) || _class);\nexport default Notifications;","map":null,"metadata":{},"sourceType":"module"}