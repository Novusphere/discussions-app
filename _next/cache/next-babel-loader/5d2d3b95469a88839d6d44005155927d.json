{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDollarSign, faLink, faReply, faUserMinus, faUserPlus } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment';\nimport { Votes, ReplyBox, UserNameWithIcon } from \"./..\";\nimport ReactMarkdown from 'react-markdown';\nimport { inject, observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport { openInNewTab } from \"../../utils\";\nlet Reply = (_dec = inject('userStore', 'newAuthStore'), _dec(_class = observer(_class = (_temp = class Reply extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isHover: false\n    };\n\n    this.setHover = state => {\n      this.setState({\n        isHover: state\n      });\n    };\n\n    this.toggleFollowStatus = () => {\n      const {\n        post\n      } = this.props;\n      this.props.userStore.toggleUserFollowing(post.posterName, post.pub);\n    };\n\n    this.renderHoverElements = () => {\n      if (!this.state.isHover) {\n        return null;\n      }\n\n      const {\n        post,\n        getModel,\n        userStore,\n        newAuthStore\n      } = this.props;\n      const {\n        isFollowingUser\n      } = userStore;\n      const {\n        activePublicKey,\n        hasAccount\n      } = newAuthStore;\n      const replyModel = getModel(post);\n      return __jsx(\"div\", {\n        className: 'hover-elements disable-user-select'\n      }, __jsx(\"span\", {\n        onClick: replyModel.toggleOpen,\n        title: 'Reply to post'\n      }, __jsx(FontAwesomeIcon, {\n        icon: faReply\n      })), __jsx(\"span\", {\n        title: 'Donate tokens'\n      }, __jsx(FontAwesomeIcon, {\n        icon: faDollarSign\n      })), __jsx(\"span\", {\n        title: 'View block',\n        onClick: () => openInNewTab(`https://eosq.app/tx/${post.transaction}`)\n      }, __jsx(FontAwesomeIcon, {\n        icon: faLink\n      })), post.pub && hasAccount && activePublicKey !== post.pub ? isFollowingUser(post.posterName) ? __jsx(\"span\", {\n        title: 'Unfollow user',\n        onClick: this.toggleFollowStatus\n      }, __jsx(FontAwesomeIcon, {\n        icon: faUserMinus,\n        className: 'red'\n      })) : __jsx(\"span\", {\n        title: 'Follow user',\n        onClick: this.toggleFollowStatus\n      }, __jsx(FontAwesomeIcon, {\n        icon: faUserPlus\n      })) : null);\n    };\n  }\n\n  render() {\n    const {\n      post,\n      voteHandler,\n      getModel,\n      getRepliesFromMap,\n      className,\n      userStore,\n      newAuthStore\n    } = this.props;\n    const replyModel = getModel(post);\n    const replies = getRepliesFromMap(post.uuid);\n    return __jsx(\"div\", {\n      className: classNames(['post-reply black', {\n        [className]: !!className\n      }]),\n      onMouseEnter: () => this.setHover(true),\n      onMouseLeave: () => this.setHover(false)\n    }, this.renderHoverElements(), __jsx(\"div\", {\n      className: classNames(['flex flex-row pa2', {\n        'post-content-hover': this.state.isHover\n      }])\n    }, __jsx(\"div\", {\n      className: 'flex justify-between items-center mr2'\n    }, __jsx(Votes, {\n      upVotes: post.upvotes,\n      downVotes: post.downvotes,\n      myVote: post.myVote,\n      uuid: post.uuid,\n      handler: voteHandler\n    })), __jsx(\"div\", {\n      className: 'flex flex-column'\n    }, __jsx(\"div\", {\n      className: 'header pb0'\n    }, __jsx(UserNameWithIcon, {\n      imageData: post.imageData,\n      name: post.posterName\n    }), __jsx(\"span\", {\n      className: 'pl2 o-50 f6'\n    }, moment(post.createdAt).fromNow())), __jsx(ReactMarkdown, {\n      className: 'f6 lh-copy reply-content',\n      source: post.content\n    }))), replyModel.open ? __jsx(ReplyBox, {\n      className: classNames(['ph4 pb4', {\n        'post-content-hover': this.state.isHover\n      }]),\n      uid: post.uuid,\n      onContentChange: replyModel.setContent,\n      onSubmit: replyModel.onSubmit\n    }) : null, replies && replies.length ? replies.map(postReply => __jsx(\"div\", {\n      onMouseLeave: () => this.setHover(true),\n      onMouseEnter: () => this.setHover(false),\n      key: postReply.uuid\n    }, __jsx(Reply, {\n      post: postReply,\n      getModel: getModel,\n      className: 'ml3',\n      getRepliesFromMap: getRepliesFromMap,\n      voteHandler: voteHandler,\n      userStore: userStore,\n      newAuthStore: newAuthStore\n    }))) : null);\n  }\n\n}, _temp)) || _class) || _class);\nexport default Reply;","map":null,"metadata":{},"sourceType":"module"}