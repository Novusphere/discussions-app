{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Feed } from \"../../components\";\nimport { pushToThread } from \"../../utils\";\nimport Head from 'next/head';\n// TODO: Merge logic between e/page and tag/page. Right now it's separated.\nvar Tag = (_dec = inject('tagStore', 'postsStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tag, _React$Component);\n\n  function Tag() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tag);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tag)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.clickPost = function (post) {\n      pushToThread(post);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tag, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.tagStore.setActiveTag(this.props.tagName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clickPost = this.clickPost,\n          _this$props = this.props,\n          postsStore = _this$props.postsStore,\n          tagStore = _this$props.tagStore,\n          feed = _this$props.feed,\n          tagName = _this$props.tagName;\n\n      if (!feed || !feed.length) {\n        return __jsx(\"span\", null, \"No posts found for specified tag: \", tagName);\n      }\n\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, tagName)), __jsx(Feed, {\n        threads: postsStore.feedThreads,\n        onClick: clickPost,\n        tagModel: tagStore.activeTag\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, store, tag, postsStore, tagStore, feed;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query, store = _ref.store;\n                tag = query.name;\n                postsStore = store.postsStore;\n                tagStore = store.tagStore;\n\n                if (tagStore.activeTag && tagStore.activeTag.name !== tag) {\n                  postsStore.resetPositionAndPosts();\n                  tagStore.setActiveTag(tag);\n                }\n\n                _context.next = 7;\n                return postsStore.getPostsByTag([tag]);\n\n              case 7:\n                feed = _context.sent;\n                return _context.abrupt(\"return\", {\n                  tagName: tag,\n                  feed: feed\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Tag;\n}(React.Component), _temp)) || _class) || _class);\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}