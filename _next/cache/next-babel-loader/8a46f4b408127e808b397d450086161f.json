{"ast":null,"code":"var _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { observer } from 'mobx-react';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport { pushToThread } from \"../../utils\";\nimport Router from 'next/router';\n\nlet UserNotifications = observer(_class = (_temp = class UserNotifications extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      height: 0\n    };\n    this.container = React.createRef();\n\n    this.clearNotifications = () => {\n      const {\n        height\n      } = this.container.current.getBoundingClientRect();\n      this.setState({\n        height\n      }, () => {\n        this.props.notificationsStore.clearNotifications();\n      });\n    };\n\n    this.getPoster = notification => {\n      let poster = notification.poster;\n\n      if (poster === 'eosforumanon') {\n        poster = notification.displayName;\n      }\n\n      return poster;\n    };\n\n    this.renderNotification = notification => {\n      return __jsx(\"span\", {\n        className: 'notification-item',\n        key: notification.uuid,\n        title: 'Click to go to post',\n        onClick: () => pushToThread(notification)\n      }, __jsx(\"span\", {\n        className: 'f5 tl'\n      }, __jsx(\"span\", {\n        className: 'f6 b flex mb2'\n      }, \"You have been mentioned by \", this.getPoster(notification)), __jsx(ReactMarkdown, {\n        className: 'black flex notifications-content',\n        source: notification.content\n      })), __jsx(\"span\", {\n        className: 'f6 tl flex mt3',\n        title: moment(notification.createdAt).toLocaleString()\n      }, moment(notification.createdAt).fromNow()));\n    };\n\n    this.renderNotifications = () => {\n      if (!this.props.notificationsStore.firstSetOfNotifications.length) {\n        return __jsx(\"span\", {\n          className: 'tc f6 pt4 self-center'\n        }, \"You have no new notifications\");\n      }\n\n      return this.props.notificationsStore.firstSetOfNotifications.map(notification => {\n        return this.renderNotification(notification);\n      });\n    };\n\n    this.goToNotifications = () => {\n      Router.push({\n        pathname: '/notifications'\n      });\n    };\n  }\n\n  async componentDidMount() {\n    this.props.notificationsStore.setTimeStamp();\n    this.props.notificationsStore.resetUnreadCount();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: this.container,\n      style: {\n        minHeight: this.state.height ? this.state.height : undefined\n      }\n    }, this.props.notificationsStore.fetchNotifications['match']({\n      pending: () => __jsx(\"span\", null, \"Loading...\"),\n      rejected: () => __jsx(\"span\", null, \"Failed to fetch your notifications\"),\n      resolved: () => __jsx(\"div\", {\n        className: 'notification-tooltip',\n        style: {\n          width: 300\n        }\n      }, this.renderNotifications(), __jsx(\"div\", {\n        className: 'f6 gray bg-near-white w-100 self-end pv3 ph3 flex flex-row justify-between'\n      }, __jsx(\"span\", {\n        onClick: this.clearNotifications,\n        className: 'b dim pointer',\n        title: 'Mark all new notifications as read'\n      }, \"mark as read\"), __jsx(\"span\", {\n        onClick: this.goToNotifications,\n        className: 'dim pointer',\n        title: 'View all notifications, including ones that are read'\n      }, \"view all\")))\n    }));\n  }\n\n}, _temp)) || _class;\n\nexport default UserNotifications;","map":null,"metadata":{},"sourceType":"module"}