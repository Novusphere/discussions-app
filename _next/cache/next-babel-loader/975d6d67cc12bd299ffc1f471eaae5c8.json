{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Modal, SignInModalOptions, SuccessSetup, SetNewBK, ScatterAskForPassword, BrainKeySetPassword } from \"../..\";\nimport { observer, inject } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { SignInMethods } from \"../../../constants/globals\";\nimport { SignInOptions } from \"../../../constants/sign-in-options\";\nimport dynamic from 'next/dynamic';\nconst StepWizard = dynamic(() => import('react-step-wizard'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-step-wizard')],\n    modules: ['react-step-wizard']\n  }\n});\nlet SignInModal = (_dec = inject('newAuthStore', 'uiStore'), _dec(_class = observer(_class = (_temp = class SignInModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickedSignInOption: ''\n    };\n\n    this.clickSignIn = name => {\n      if (this.state.clickedSignInOption === name) {\n        this.setState({\n          clickedSignInOption: ''\n        });\n      } else {\n        this.setState({\n          clickedSignInOption: name\n        });\n      }\n\n      this.props.newAuthStore.setClickedSignInMethod(name);\n    };\n\n    this.renderButtons = (choosePasswordForm, setPassword, setNewBKAndPasswordForm, setPasswordScatter) => {\n      const {\n        signInObject,\n        initializeScatterLogin,\n        loginWithBK,\n        handleStepSwitchForBK,\n        hasBKAccount\n      } = this.props.newAuthStore;\n\n      if (signInObject.ref) {\n        switch (signInObject.step) {\n          case 1:\n            if (!this.state.clickedSignInOption) {\n              return __jsx(\"button\", {\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                disabled: !this.state.clickedSignInOption\n              }, \"Select a sign in method\");\n            }\n\n            switch (this.state.clickedSignInOption) {\n              case SignInMethods.scatter:\n                if (initializeScatterLogin['pending']) {\n                  return __jsx(\"button\", {\n                    className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                    disabled: initializeScatterLogin['pending']\n                  }, __jsx(FontAwesomeIcon, {\n                    width: 13,\n                    icon: faSpinner,\n                    spin: true\n                  }));\n                }\n\n                return __jsx(\"button\", {\n                  onClick: initializeScatterLogin,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !this.state.clickedSignInOption\n                }, \"Sign in via Scatter\");\n\n              case SignInMethods.brainKey:\n                if (hasBKAccount && loginWithBK['pending']) {\n                  return __jsx(\"button\", {\n                    className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                    disabled: loginWithBK['pending']\n                  }, __jsx(FontAwesomeIcon, {\n                    width: 13,\n                    icon: faSpinner,\n                    spin: true\n                  }));\n                }\n\n                return __jsx(React.Fragment, null, __jsx(\"button\", {\n                  onClick: () => {\n                    signInObject.ref.goToStep(2);\n                  },\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !this.state.clickedSignInOption\n                }, \"Sign in via another brain key\"), hasBKAccount ? __jsx(\"button\", {\n                  onClick: handleStepSwitchForBK,\n                  className: 'f6 link dim ph3 pv2 dib pointer white bg-green',\n                  disabled: !this.state.clickedSignInOption\n                }, \"Continue as \", hasBKAccount) : null);\n            }\n\n            break;\n\n          case 2:\n            return this.props.newAuthStore.loginWithBK['match']({\n              rejected: error => __jsx(React.Fragment, null, JSON.stringify(error), __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithBK['pending'],\n                onClick: setNewBKAndPasswordForm.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Log In\")),\n              pending: () => __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithBK['pending'],\n                onClick: setNewBKAndPasswordForm.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, __jsx(FontAwesomeIcon, {\n                width: 13,\n                icon: faSpinner,\n                spin: true\n              })),\n              resolved: () => __jsx(React.Fragment, null, __jsx(\"span\", {\n                className: 'b pointer dim',\n                title: 'Sign in with another sign in boost',\n                onClick: () => this.props.newAuthStore.signInObject.ref.goToStep(1)\n              }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithBK['pending'],\n                onClick: setNewBKAndPasswordForm.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Setup and login with new account\"))\n            });\n\n          case 3:\n            return this.props.newAuthStore.loginWithPassword['match']({\n              rejected: () => __jsx(React.Fragment, null, __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithPassword['pending'],\n                onClick: setPassword.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Log In\")),\n              pending: () => __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithPassword['pending'],\n                onClick: setPassword.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, __jsx(FontAwesomeIcon, {\n                width: 13,\n                icon: faSpinner,\n                spin: true\n              })),\n              resolved: () => __jsx(React.Fragment, null, __jsx(\"span\", {\n                className: 'b pointer dim',\n                title: 'Sign in with another sign in boost',\n                onClick: () => this.props.newAuthStore.signInObject.ref.goToStep(1)\n              }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                disabled: this.props.newAuthStore.loginWithPassword['pending'],\n                onClick: setPassword.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Log In as \", hasBKAccount))\n            });\n\n          case 4:\n            break;\n\n          case 5:\n            return this.props.newAuthStore.initializeScatterLogin['match']({\n              rejected: () => __jsx(React.Fragment, null, __jsx(\"button\", {\n                disabled: this.props.newAuthStore.initializeScatterLogin['pending'],\n                onClick: setPasswordScatter.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Log In\")),\n              pending: () => __jsx(\"button\", {\n                disabled: this.props.newAuthStore.initializeScatterLogin['pending'],\n                onClick: setPasswordScatter.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, __jsx(FontAwesomeIcon, {\n                width: 13,\n                icon: faSpinner,\n                spin: true\n              })),\n              resolved: () => __jsx(React.Fragment, null, __jsx(\"span\", {\n                className: 'b pointer dim',\n                title: 'Sign in with another sign in boost',\n                onClick: () => this.props.newAuthStore.signInObject.ref.goToStep(1)\n              }, \"Or log in with another sign in method\"), ' ', __jsx(\"button\", {\n                disabled: this.props.newAuthStore.initializeScatterLogin['pending'],\n                onClick: setPasswordScatter.onSubmit,\n                className: 'f6 link dim ph3 pv2 dib pointer white bg-red'\n              }, \"Log In with Scatter\"))\n            });\n        }\n      }\n    };\n\n    this.handleRememberClick = () => {\n      const {\n        setPreferredSignInMethod\n      } = this.props.newAuthStore;\n      setPreferredSignInMethod(this.state.clickedSignInOption);\n    };\n\n    this.renderRememberOption = () => {\n      const {\n        signInObject,\n        preferredSignInMethod\n      } = this.props.newAuthStore;\n\n      if (signInObject.step === 1) {\n        return __jsx(\"span\", {\n          className: 'flex items-center'\n        }, __jsx(\"input\", {\n          onChange: this.handleRememberClick,\n          type: \"checkbox\",\n          id: \"rememberOption\",\n          name: \"rememberOption\",\n          checked: preferredSignInMethod === this.state.clickedSignInOption\n        }), __jsx(\"label\", {\n          htmlFor: \"rememberOption\",\n          className: 'ml2 f6'\n        }, \"Automatically select this option next time\"));\n      }\n    };\n\n    this.onStepChange = ({\n      activeStep\n    }) => {\n      this.props.newAuthStore.signInObject.step = activeStep;\n    };\n\n    this.setInstance = instance => {\n      this.props.newAuthStore.signInObject.ref = instance;\n    };\n  }\n\n  render() {\n    const {\n      signInObject\n    } = this.props.newAuthStore;\n    const choosePasswordForm = this.props.newAuthStore.choosePassword;\n    const setPasswordBK = this.props.newAuthStore.setPasswordBK;\n    const setPasswordScatter = this.props.newAuthStore.setPasswordScatter;\n    const setNewBKAndPasswordForm = this.props.newAuthStore.setNewBKAndPasswordForm;\n    return __jsx(Modal, null, ({\n      CloseIcon\n    }) => __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: 'flex items-center justify-end'\n    }, __jsx(CloseIcon, null)), __jsx(StepWizard, {\n      instance: this.setInstance,\n      initialStep: signInObject.step,\n      onStepChange: this.onStepChange\n    }, __jsx(SignInModalOptions, {\n      signInOptions: SignInOptions,\n      optionOnClick: this.clickSignIn,\n      clickedSignInOption: this.state.clickedSignInOption\n    }), __jsx(SetNewBK, {\n      form: setNewBKAndPasswordForm\n    }), __jsx(BrainKeySetPassword, {\n      form: setPasswordBK\n    }), __jsx(SuccessSetup, null), __jsx(ScatterAskForPassword, {\n      form: setPasswordScatter\n    })), __jsx(\"div\", {\n      className: 'modal-footer'\n    }, this.renderRememberOption(), this.renderButtons(choosePasswordForm, setPasswordBK, setNewBKAndPasswordForm, setPasswordScatter))));\n  }\n\n}, _temp)) || _class) || _class);\nexport default SignInModal;","map":null,"metadata":{},"sourceType":"module"}