{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { observer } from 'mobx-react';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport { pushToThread } from \"../../utils\";\nimport Router from 'next/router';\n\nvar UserNotifications = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserNotifications, _React$Component);\n\n  function UserNotifications() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserNotifications);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserNotifications)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      height: 0\n    };\n    _this.container = React.createRef();\n\n    _this.clearNotifications = function () {\n      var _this$container$curre = _this.container.current.getBoundingClientRect(),\n          height = _this$container$curre.height;\n\n      _this.setState({\n        height: height\n      }, function () {\n        _this.props.notificationsStore.clearNotifications();\n      });\n    };\n\n    _this.getPoster = function (notification) {\n      var poster = notification.poster;\n\n      if (poster === 'eosforumanon') {\n        poster = notification.displayName;\n      }\n\n      return poster;\n    };\n\n    _this.renderNotification = function (notification) {\n      return __jsx(\"span\", {\n        className: 'notification-item',\n        key: notification.uuid,\n        title: 'Click to go to post',\n        onClick: function onClick() {\n          return pushToThread(notification);\n        }\n      }, __jsx(\"span\", {\n        className: 'f5 tl'\n      }, __jsx(\"span\", {\n        className: 'f6 b flex mb2'\n      }, \"You have been mentioned by \", _this.getPoster(notification)), __jsx(ReactMarkdown, {\n        className: 'black flex notifications-content',\n        source: notification.content\n      })), __jsx(\"span\", {\n        className: 'f6 tl flex mt3',\n        title: moment(notification.createdAt).toLocaleString()\n      }, moment(notification.createdAt).fromNow()));\n    };\n\n    _this.renderNotifications = function () {\n      if (!_this.props.notificationsStore.firstSetOfNotifications.length) {\n        return __jsx(\"span\", {\n          className: 'tc f6 pt4 self-center'\n        }, \"You have no new notifications\");\n      }\n\n      return _this.props.notificationsStore.firstSetOfNotifications.map(function (notification) {\n        return _this.renderNotification(notification);\n      });\n    };\n\n    _this.goToNotifications = function () {\n      Router.push({\n        pathname: '/notifications'\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(UserNotifications, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.props.notificationsStore.setTimeStamp();\n                this.props.notificationsStore.resetUnreadCount();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        ref: this.container,\n        style: {\n          minHeight: this.state.height ? this.state.height : undefined\n        }\n      }, this.props.notificationsStore.fetchNotifications['match']({\n        pending: function pending() {\n          return __jsx(\"span\", null, \"Loading...\");\n        },\n        rejected: function rejected() {\n          return __jsx(\"span\", null, \"Failed to fetch your notifications\");\n        },\n        resolved: function resolved() {\n          return __jsx(\"div\", {\n            className: 'notification-tooltip',\n            style: {\n              width: 300\n            }\n          }, _this2.renderNotifications(), __jsx(\"div\", {\n            className: 'f6 gray bg-near-white w-100 self-end pv3 ph3 flex flex-row justify-between'\n          }, __jsx(\"span\", {\n            onClick: _this2.clearNotifications,\n            className: 'b dim pointer',\n            title: 'Mark all new notifications as read'\n          }, \"mark as read\"), __jsx(\"span\", {\n            onClick: _this2.goToNotifications,\n            className: 'dim pointer',\n            title: 'View all notifications, including ones that are read'\n          }, \"view all\")));\n        }\n      }));\n    }\n  }]);\n\n  return UserNotifications;\n}(React.Component), _temp)) || _class;\n\nexport default UserNotifications;","map":null,"metadata":{},"sourceType":"module"}