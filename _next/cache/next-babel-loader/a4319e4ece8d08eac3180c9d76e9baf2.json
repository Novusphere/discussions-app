{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport App, { Container } from 'next/app';\nimport React from 'react';\nimport * as Stores from \"../stores\";\nimport { Provider, useStaticRendering } from 'mobx-react';\nimport { MainLayout } from \"../components\";\nimport { withMobx } from 'next-mobx-wrapper';\nimport { isServer } from \"../utils\";\nimport { create } from 'mobx-persist';\nimport { toast } from 'react-toastify';\nimport \"../styles/style.scss\"; // configure({ enforceActions: 'observed' })\n\nuseStaticRendering(isServer); // NOT `true` value\n\ntoast.configure();\n\nvar DiscussionApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(DiscussionApp, _App);\n\n  function DiscussionApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DiscussionApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DiscussionApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.props = void 0;\n    return _this;\n  }\n\n  _createClass(DiscussionApp, [{\n    key: \"componentDidMount\",\n    // static async getInitialProps({ ctx, Component }) {\n    //     const isServer = !!ctx.req\n    //     let pageProps = {}\n    //     //\n    //     if (Component.getInitialProps) {\n    //         pageProps = await Component.getInitialProps(ctx)\n    //     }\n    //\n    //     return {\n    //         isServer,\n    //         pageProps,\n    //     }\n    // }\n\n    /**\r\n     * Hydrate the store for LS here\r\n     * Due to SSR, we have to execute this part\r\n     * on the client.\r\n     */\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this$props$store, newAuthStore, settingsStore, userStore, notificationsStore, stores, hydrate;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!isServer) {\n                  _this$props$store = this.props.store, newAuthStore = _this$props$store.newAuthStore, settingsStore = _this$props$store.settingsStore, userStore = _this$props$store.userStore, notificationsStore = _this$props$store.notificationsStore;\n                  stores = {\n                    auth: newAuthStore,\n                    settings: settingsStore,\n                    user: userStore,\n                    notifications: notificationsStore\n                  };\n                  hydrate = create({\n                    storage: localStorage,\n                    jsonify: true\n                  });\n                  Object.keys(stores).forEach(function (store) {\n                    hydrate(store, stores[store]); // if (getVersion() !== this.props.store.settingsStore.localStorageVersion) {\n                    //     console.error('local storage version mismatch')\n                    //\n                    //     result.rehydrate().then(() => {\n                    //         console.log('store rehydrated')\n                    //     })\n                    // }\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          Component = _props.Component,\n          pageProps = _props.pageProps,\n          store = _props.store;\n      return __jsx(Container, null, __jsx(Provider, store, __jsx(MainLayout, null, __jsx(Component, pageProps))));\n    }\n  }]);\n\n  return DiscussionApp;\n}(App);\n\nexport default withMobx(Stores)(DiscussionApp);","map":null,"metadata":{},"sourceType":"module"}