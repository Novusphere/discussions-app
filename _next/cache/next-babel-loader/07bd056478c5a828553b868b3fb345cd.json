{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar fetch = require('node-fetch');\n\nexport function getTokens() {\n  return _getTokens.apply(this, arguments);\n}\n\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var TOKEN_ENDPOINTS, tokens, i, request, json, key;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            TOKEN_ENDPOINTS = [\"https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/tokens.json\", \"https://raw.githubusercontent.com/Novusphere/eos-forum-settings/master/tokens.json\"];\n            tokens = [];\n            i = 0;\n\n          case 3:\n            if (!(i < TOKEN_ENDPOINTS.length)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 6;\n            return fetch(TOKEN_ENDPOINTS[i]);\n\n          case 6:\n            request = _context.sent;\n            _context.next = 9;\n            return request.json();\n\n          case 9:\n            json = _context.sent;\n\n            for (key in json) {\n              if (key in tokens) {\n                Object.assign(tokens[key], json[key]);\n              } else {\n                tokens[key] = json[key];\n              }\n            }\n\n          case 11:\n            i++;\n            _context.next = 3;\n            break;\n\n          case 14:\n            return _context.abrupt(\"return\", tokens);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getTokens.apply(this, arguments);\n}\n\nexport function getAccountTokens(_x, _x2) {\n  return _getAccountTokens.apply(this, arguments);\n}\n\nfunction _getAccountTokens() {\n  _getAccountTokens = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(account, tokens) {\n    var balances, request, json, _loop, i;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            balances = [];\n            _context2.next = 3;\n            return fetch(\"https://www.api.bloks.io/account/\".concat(account, \"?type=getAccountTokens\"));\n\n          case 3:\n            request = _context2.sent;\n            _context2.next = 6;\n            return request.json();\n\n          case 6:\n            json = _context2.sent;\n\n            _loop = function _loop(i) {\n              var token = json.tokens[i];\n              var info = tokens.find(function (t) {\n                return t.account == token.contract && t.symbol == token.currency;\n              });\n              if (info) balances.push({\n                amount: token.amount,\n                token: info\n              });\n            };\n\n            for (i = 0; i < json.tokens.length; i++) {\n              _loop(i);\n            }\n\n            return _context2.abrupt(\"return\", balances);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAccountTokens.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}