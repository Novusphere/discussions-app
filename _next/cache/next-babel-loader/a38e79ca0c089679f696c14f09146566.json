{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;\n\nimport { BaseStore, getOrCreateStore } from 'next-mobx-wrapper';\nimport { action, computed, observable } from 'mobx';\nimport { persist } from 'mobx-persist';\nimport { ModalOptions, SignInMethods } from \"../constants/globals\";\nimport { CreateForm } from \"../components\";\nimport { task } from 'mobx-task';\nimport { discussions, eos, init } from \"../novusphere-js\";\nimport { getUiStore } from \"./index\";\nimport { sleep } from \"../utils\";\nlet NewAuth = (_dec = persist('object'), _dec2 = persist('object'), _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, _dec6 = task.resolved, _dec7 = action.bound, _dec8 = task.resolved, _dec9 = action.bound, _dec10 = task.resolved, _dec11 = action.bound, _dec12 = task.resolved, _dec13 = action.bound, _dec14 = task.resolved, _dec15 = action.bound, _dec16 = task.resolved, _dec17 = action.bound, _dec18 = task.resolved, _dec19 = action.bound, _dec20 = task.resolved, _dec21 = action.bound, _dec22 = action.bound, _dec23 = task.resolved, _dec24 = task.resolved, _dec25 = action.bound, _dec26 = task.resolved, _dec27 = action.bound, (_class = (_temp = class NewAuth extends BaseStore {\n  // private stuff\n  // signup object\n  // login objects\n  // status\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"displayName\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"postPriv\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"tipPub\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"preferredSignInMethod\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"privateKey\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"statusJson\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"clickedSignInMethod\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"signUpObject\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"signInObject\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"hasAccount\", _descriptor10, this);\n\n    this.uiStore = getUiStore();\n    this.checkInitialConditions();\n  }\n\n  async checkInitialConditions() {\n    await sleep(500);\n\n    if (this.getActiveDisplayName && this.postPriv && this.tipPub) {\n      if (this.preferredSignInMethod === SignInMethods.scatter) {\n        try {\n          return await this.initializeScatterLogin();\n        } catch (error) {\n          this.hasAccount = false;\n          return error;\n        }\n      }\n\n      if (this.preferredSignInMethod === SignInMethods.brainKey) {\n        if (this.statusJson.bk && this.postPriv && this.tipPub && this.displayName.bk) {\n          this.hasAccount = true;\n        }\n      }\n    } else {\n      this.hasAccount = false;\n    }\n  }\n\n  get isBKAccount() {\n    return this.getActiveDisplayName === this.displayName.bk;\n  }\n\n  get activePublicKey() {\n    if (!this.statusJson.bk || !this.statusJson.scatter) return null;\n\n    if (this.isBKAccount) {\n      return this.statusJson.bk.post;\n    }\n\n    return this.statusJson.scatter.post;\n  }\n\n  setClickedSignInMethod(method) {\n    this.clickedSignInMethod = method;\n  }\n  /**\r\n   * Used for posting, returns empty string if the\r\n   * user is logged in via a non-scatter method\r\n   */\n\n\n  get posterName() {\n    return this.getActiveDisplayName;\n  }\n\n  get getActiveDisplayName() {\n    if (this.clickedSignInMethod === SignInMethods.brainKey) {\n      return this.displayName.bk;\n    }\n\n    if (this.clickedSignInMethod === SignInMethods.scatter) {\n      return this.displayName.scatter;\n    }\n\n    if (!this.clickedSignInMethod) {\n      if (this.preferredSignInMethod === SignInMethods.brainKey) {\n        return this.displayName.bk;\n      }\n\n      return this.displayName.scatter;\n    }\n  }\n\n  get hasBKAccount() {\n    if (!this.displayName.bk) return false;\n    return this.displayName.bk;\n  }\n\n  setPreferredSignInMethod(method) {\n    if (method !== this.preferredSignInMethod) {\n      this.preferredSignInMethod = method;\n    } else {\n      if (method === SignInMethods.brainKey) {\n        this.preferredSignInMethod = SignInMethods.scatter;\n      }\n\n      if (method === SignInMethods.scatter) {\n        this.preferredSignInMethod = SignInMethods.brainKey;\n      }\n    }\n  }\n  /**\r\n   * Signup forms\r\n   */\n\n\n  get signUpForm() {\n    return new CreateForm({\n      onSubmit: form => {\n        const {\n          displayName,\n          password\n        } = form.values();\n\n        if (!form.hasError) {\n          this.signUpObject.username = displayName;\n          this.signUpObject.password = password;\n        }\n      }\n    }, [{\n      name: 'displayName',\n      label: 'Display Name',\n      type: 'text',\n      value: this.signUpObject.username,\n      placeholder: 'Your display name',\n      rules: 'required|string|between:3,25'\n    }, {\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      value: this.signUpObject.password,\n      placeholder: 'Your password',\n      rules: 'required|string|between:5,25'\n    }, {\n      name: 'passwordConfirm',\n      label: 'Password Confirmation',\n      type: 'password',\n      value: this.signUpObject.password,\n      placeholder: 'Confirm Password',\n      rules: 'required|string|same:password'\n    }]);\n  }\n\n  get verifyBKForm() {\n    return new CreateForm({\n      onSubmit: form => {\n        const {\n          bkVerify\n        } = form.values();\n\n        if (!form.hasError) {\n          this.signUpObject.brianKeyVerify = bkVerify;\n          this.signUpWithBK();\n        }\n      }\n    }, [{\n      name: 'bkVerify',\n      label: 'Verify your brain key',\n      type: 'textarea',\n      rules: 'required|string'\n    }]);\n  }\n\n  async generateBrianKey() {\n    const key = discussions.bkCreate();\n    console.log('Class: NewAuth, Function: generateBrianKey, Line 81 key: ', key);\n    this.signUpObject.brianKey = key;\n    return key;\n  }\n\n  async logOut() {\n    try {\n      await eos.logout();\n      this.hasAccount = false;\n      this.uiStore.showToast('You have signed out!', 'success');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async signUpWithBK() {\n    try {\n      if (this.signUpObject.brianKey === this.signUpObject.brianKeyVerify) {\n        await this.completeSignUpProcess();\n        this.uiStore.hideModal();\n        this.uiStore.showToast('You have successfully signed up!', 'success');\n      } else {\n        this.uiStore.showToast('The key you entered does not match the one we generated. Please try again.', 'error');\n      }\n    } catch (error) {\n      this.uiStore.showToast(error.message, 'error');\n      console.error(error);\n      return error;\n    }\n  }\n  /**\r\n   * Sign in forms\r\n   */\n\n\n  get setNewBKAndPasswordForm() {\n    return new CreateForm({\n      onSubmit: form => {\n        const {\n          bk,\n          displayName,\n          password\n        } = form.values();\n\n        if (!form.hasError) {\n          this.loginWithBK(bk, displayName, password);\n        }\n      }\n    }, [{\n      name: 'bk',\n      label: 'Brain Key',\n      type: 'textarea',\n      placeholder: 'Enter your BK',\n      rules: 'required|string'\n    }, {\n      name: 'displayName',\n      label: 'Display Name',\n      type: 'text',\n      placeholder: 'Enter your preferred display name',\n      rules: 'required|string'\n    }, {\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      placeholder: 'Your password',\n      rules: 'required|string|between:5,25'\n    }]);\n  }\n\n  get setPasswordBK() {\n    return new CreateForm({\n      onSubmit: form => {\n        const {\n          password\n        } = form.values();\n\n        if (!form.hasError) {\n          this.loginWithPassword(password);\n        }\n      }\n    }, [{\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      placeholder: 'Your password',\n      rules: 'required|string|between:5,25'\n    }]);\n  }\n\n  get setPasswordScatter() {\n    return new CreateForm({\n      onSubmit: form => {\n        const {\n          password\n        } = form.values();\n\n        if (!form.hasError) {\n          return this.loginWithScatter(password);\n        }\n      }\n    }, [{\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      placeholder: 'Your password',\n      rules: 'required|string|between:5,25'\n    }]);\n  }\n\n  get choosePassword() {\n    return new CreateForm({\n      onSubmit: async form => {\n        const {\n          password\n        } = form.values();\n        console.log('Class: NewAuth, Function: onSubmit, Line 264 password: ', password);\n      }\n    }, [{\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      placeholder: 'Your password',\n      rules: 'required|string|between:5,25'\n    }, {\n      name: 'passwordConfirm',\n      label: 'Password Confirmation',\n      type: 'password',\n      placeholder: 'Confirm Password',\n      rules: 'required|string|same:password'\n    }]);\n  }\n\n  async loginWithBK(bk, displayName, password) {\n    try {\n      // check if valid bk\n      const bkIsValid = discussions.bkIsValid(bk);\n\n      if (!bkIsValid) {\n        this.uiStore.showToast('You have entered an invalid brain key.', 'error');\n        return;\n      }\n\n      const unparsedJSON = await this.bkToStatusJson(bk, displayName, password, null);\n      console.log('Class: NewAuth, Function: loginWithBK, Line 363 unparsedJSON: ', unparsedJSON);\n\n      if (unparsedJSON) {\n        const statusJSON = JSON.parse(unparsedJSON);\n        this.statusJson.bk = statusJSON;\n        this.displayName.bk = statusJSON['displayName'];\n        await this.storeKeys(bk);\n        this.completeSignInProcess();\n      } else {\n        console.log('failed');\n      }\n    } catch (error) {\n      this.uiStore.showToast('Something went wrong!', 'error');\n      return error;\n    }\n  }\n\n  async loginWithPassword(password) {\n    try {\n      const bk = await discussions.bkFromStatusJson(JSON.stringify(this.statusJson.bk), password);\n      await this.loginWithBK(bk, this.statusJson.bk['displayName'], password);\n    } catch (error) {\n      this.uiStore.showToast(error.message, 'error');\n      return error;\n    }\n  }\n\n  async initializeScatterLogin() {\n    try {\n      await init();\n      const wallet = await eos.detectWallet();\n\n      if (typeof wallet !== 'boolean' && wallet) {\n        // prompt login\n        await eos.login();\n        console.log('time to ask for your password');\n\n        if (this.uiStore.activeModal !== ModalOptions.signIn) {\n          this.uiStore.showModal(ModalOptions.signIn);\n          await sleep(50);\n          this.signInObject.ref.goToStep(5);\n        }\n\n        if (this.uiStore.activeModal === ModalOptions.signIn) {\n          this.signInObject.ref.goToStep(5);\n        }\n      } else {\n        throw new Error('Failed to detect wallet');\n      }\n    } catch (error) {\n      this.uiStore.showToast('Failed to detect wallet', 'error');\n      console.log(error);\n      return error;\n    }\n  }\n\n  async loginWithScatter(password) {\n    try {\n      const accountName = eos.accountName;\n      const json = await discussions.bkRetrieveStatusEOS(accountName);\n      const bk = await discussions.bkFromStatusJson(json, password);\n      await this.storeKeys(bk);\n\n      if (!bk) {\n        return;\n      }\n\n      this.statusJson.scatter = JSON.parse(json);\n      this.displayName.scatter = accountName;\n\n      if (accountName) {\n        this.completeSignInProcess();\n      } else {\n        throw new Error('Failed to get account name');\n      }\n    } catch (error) {\n      this.uiStore.showToast(error.message, 'error');\n      return error;\n    }\n  }\n\n  async handleStepSwitchForBK() {\n    if (this.hasBKAccount) {\n      // push them to password\n      this.signInObject.ref.goToStep(3);\n      console.log('handleStepSwitchForBK clicked, has bk account');\n    } else {\n      // let them setup a new bk\n      this.signInObject.ref.goToStep(2);\n      console.log('handleStepSwitchForBK clicked, does not have BK account');\n    }\n  }\n\n  completeSignInProcess() {\n    this.uiStore.showToast('You have successfully signed in!', 'success');\n    this.hasAccount = true;\n\n    if (this.signInObject.ref) {\n      this.signInObject.ref.goToStep(1);\n    }\n\n    if (this.uiStore.activeModal) {\n      this.uiStore.hideModal();\n    }\n  }\n\n  async completeSignUpProcess() {\n    try {\n      console.log('signing up with BK started');\n      const json = await this.bkToStatusJson(this.signUpObject.brianKeyVerify, this.signUpObject.username, this.signUpObject.password, null);\n      this.statusJson.bk = JSON.parse(json);\n      this.displayName.bk = this.signUpObject.username;\n      const transact = await discussions.bkUpdateStatusEOS(json);\n      await this.storeKeys(this.signUpObject.brianKeyVerify);\n      console.log('signing up with BK ended');\n      return transact;\n    } catch (error) {}\n  }\n\n  async storeKeys(bk) {\n    try {\n      const keys = await discussions.bkToKeys(bk);\n      this.postPriv = keys.post.priv;\n      this.tipPub = keys.tip.pub;\n      return keys;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  async bkToStatusJson(bk, username, password, status) {\n    try {\n      return await discussions.bkToStatusJson(bk, username, password, status);\n    } catch (error) {\n      return error;\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"displayName\", [_dec, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      bk: '',\n      scatter: ''\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"postPriv\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"tipPub\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"preferredSignInMethod\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return SignInMethods.brainKey;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"privateKey\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"statusJson\", [_dec2, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      bk: null,\n      scatter: null\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"clickedSignInMethod\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"signUpObject\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      brianKey: '',\n      username: '',\n      password: '',\n      brianKeyVerify: ''\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"signInObject\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      ref: null,\n      step: 1\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"hasAccount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"checkInitialConditions\", [task, _dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"checkInitialConditions\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isBKAccount\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isBKAccount\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"activePublicKey\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activePublicKey\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setClickedSignInMethod\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"setClickedSignInMethod\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"posterName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"posterName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getActiveDisplayName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getActiveDisplayName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"hasBKAccount\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"hasBKAccount\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setPreferredSignInMethod\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \"setPreferredSignInMethod\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"generateBrianKey\", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class.prototype, \"generateBrianKey\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"logOut\", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class.prototype, \"logOut\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"signUpWithBK\", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class.prototype, \"signUpWithBK\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setPasswordBK\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"setPasswordBK\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"loginWithBK\", [_dec12, _dec13], Object.getOwnPropertyDescriptor(_class.prototype, \"loginWithBK\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"loginWithPassword\", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class.prototype, \"loginWithPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"initializeScatterLogin\", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class.prototype, \"initializeScatterLogin\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"loginWithScatter\", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class.prototype, \"loginWithScatter\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"handleStepSwitchForBK\", [_dec20, _dec21], Object.getOwnPropertyDescriptor(_class.prototype, \"handleStepSwitchForBK\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"completeSignInProcess\", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, \"completeSignInProcess\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"completeSignUpProcess\", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, \"completeSignUpProcess\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"storeKeys\", [_dec24, _dec25], Object.getOwnPropertyDescriptor(_class.prototype, \"storeKeys\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"bkToStatusJson\", [_dec26, _dec27], Object.getOwnPropertyDescriptor(_class.prototype, \"bkToStatusJson\"), _class.prototype)), _class));\nexport { NewAuth as default };\nexport const getNewAuthStore = getOrCreateStore('newAuthStore', NewAuth);","map":null,"metadata":{},"sourceType":"module"}