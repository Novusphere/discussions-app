{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _temp;\n\nimport { action, computed, observable } from 'mobx';\nimport { discussions } from \"../novusphere-js\";\nimport { task } from 'mobx-task';\nimport { BaseStore, getOrCreateStore } from 'next-mobx-wrapper';\nimport { CreateForm } from \"../components\";\nimport { getTagStore } from \"./tag\";\nimport { getNewAuthStore, getUiStore } from \"./\";\nimport { generateUuid, getAttachmentValue, getIdenticon, pushToThread, sleep } from \"../utils\";\nimport { ThreadModel } from \"../models/threadModel\";\nimport FeedModel from \"../models/feedModel\";\nimport _ from 'lodash';\nvar Posts = (_dec = observable.deep, _dec2 = action.bound, (_class = (_temp =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(Posts, _BaseStore);\n\n  // all posts by filter\n  // when creating a new post\n\n  /**\r\n   * Manage getRepliesFromMap within a post (not opening post)\r\n   */\n  // which post the user is currently replying to\n  // which post the user is currently replying to\n\n  /**\r\n   * Manage getRepliesFromMap of the opening post\r\n   */\n  function Posts(props) {\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Posts).call(this, props));\n\n    _initializerDefineProperty(_this, \"posts\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"postsPosition\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"preview\", _descriptor3, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"activeThreadId\", _descriptor4, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"newPostData\", _descriptor5, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"replyingPostUUID\", _descriptor6, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"replyingPostContent\", _descriptor7, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"openingPostReplyContent\", _descriptor8, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"activeThread\", _descriptor9, _assertThisInitialized(_this));\n\n    _this.tagsStore = void 0;\n    _this.uiStore = void 0;\n    _this.newAuthStore = void 0;\n\n    _this.resetPositionAndPosts = function () {\n      _this.posts = [];\n      _this.postsPosition = {\n        items: 0,\n        cursorId: undefined\n      };\n    };\n\n    _initializerDefineProperty(_this, \"getPostsByTag\", _descriptor10, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"getThreadById\", _descriptor11, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"vote\", _descriptor12, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"clearPreview\", _descriptor13, _assertThisInitialized(_this));\n\n    _this.tagsStore = getTagStore();\n    _this.uiStore = getUiStore();\n    _this.newAuthStore = getNewAuthStore(); // refresh posts on logged in\n    // so we can show upvotes/downvotes by the user\n    // reaction(\n    //     () => this.newAuthStore.hasAccount,\n    //     async hasAccount => {\n    //         if (hasAccount) {\n    //             if (this.activeThread) {\n    //                 this.getAndSetThread(this.activeThreadId)\n    //             }\n    //         }\n    //     }\n    // )\n\n    return _this;\n  }\n\n  _createClass(Posts, [{\n    key: \"getAndSetThread\",\n    value: function () {\n      var _getAndSetThread = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        var thread;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.getThreadById(id);\n\n              case 3:\n                thread = _context.sent;\n\n                if (thread) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 6:\n                this.activeThread = thread;\n                this.activeThreadId = id;\n                return _context.abrupt(\"return\", this.activeThread);\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('Class: Posts, Function: getAndSetThread, Line 123 error: ', _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      function getAndSetThread(_x) {\n        return _getAndSetThread.apply(this, arguments);\n      }\n\n      return getAndSetThread;\n    }()\n    /**\r\n     * Get the list of users in the current thread for tagging.\r\n     * TODO: Add users the current active user follows as well\r\n     * @returns {id: string, value: string}[]\r\n     */\n\n  }, {\n    key: \"feedThreads\",\n\n    /**\r\n     * Threads shown in the feed for an active tag/sub\r\n     */\n    get: function get() {\n      if (!this.posts || !this.posts.length) {\n        return null;\n      }\n\n      return this.posts.filter(function (post) {\n        return post.parentUuid === '';\n      }).map(function (post) {\n        return new FeedModel(post);\n      });\n    }\n  }, {\n    key: \"getPossibleUsersToTag\",\n    get: function get() {\n      if (!this.activeThread) return [];\n      return _.uniqBy(_.map(_.filter(this.activeThread.map, function (posts) {\n        return posts.pub.length;\n      }), function (posts) {\n        var poster = posts.poster;\n\n        if (poster === 'eosforumanon') {\n          poster = posts.displayName;\n        }\n\n        var imageData = getIdenticon();\n\n        if (posts.pub && posts.pub.length) {\n          imageData = getIdenticon(posts.pub);\n        }\n\n        return {\n          id: posts.pub,\n          value: poster,\n          icon: imageData\n        };\n      }), function (option) {\n        return option.id;\n      });\n    }\n  }, {\n    key: \"subFields\",\n    get: function get() {\n      return {\n        name: 'sub',\n        label: 'Sub',\n        placeholder: 'Select a sub',\n        rules: 'required',\n        type: 'dropdown',\n        hideLabels: true,\n        extra: {\n          options: [{\n            value: 'all',\n            label: 'all'\n          }].concat(_toConsumableArray(Array.from(this.tagsStore.tags.values()).filter(function (tag) {\n            return !tag.root;\n          }).map(function (tag) {\n            return {\n              value: tag.name,\n              label: tag.name\n            };\n          })))\n        }\n      };\n    }\n  }, {\n    key: \"newPostForm\",\n    get: function get() {\n      var _this2 = this;\n\n      return new CreateForm({}, [{\n        name: 'title',\n        label: \"Title\",\n        placeholder: 'Enter a post title',\n        rules: 'required|string|min:5|max:45',\n        hideLabels: true\n      }, // {\n      //     name: 'sub',\n      //     label: 'Sub',\n      //     placeholder: 'Select a sub',\n      //     rules: 'required',\n      //     type: 'dropdown',\n      //     hideLabels: true,\n      //     extra: {\n      //         options: [\n      //             { value: 'all', label: 'all' },\n      //             ...Array.from(this.tagsStore.tags.values())\n      //                 .filter(tag => !tag.root)\n      //                 .map(tag => ({\n      //                     value: tag.name,\n      //                     label: tag.name,\n      //                 })),\n      //         ],\n      //     },\n      // },\n      {\n        name: 'content',\n        label: 'Content',\n        hideLabels: true,\n        placeholder: 'Enter your content',\n        // rules: 'required',\n        type: 'richtext'\n      }, // {\n      //     name: 'attachmentType',\n      //     type: 'radiogroup',\n      //     value: 'No Attachment',\n      //     hideLabels: true,\n      //     extra: {\n      //         options: [\n      //             {\n      //                 value: 'No Attachment',\n      //                 onClick: ({ form }) => {\n      //                     form.$('urlType').$extra.render = false\n      //                     form.$('hash').$extra.render = false\n      //                     form.$('txidType').$extra.render = false\n      //\n      //                     // reset values\n      //                     form.$('urlType').value = ''\n      //                     form.$('hash').value = ''\n      //                     form.$('txidType').value = ''\n      //                 },\n      //             },\n      //             {\n      //                 value: 'URL',\n      //                 onClick: ({ form }) => {\n      //                     form.$('urlType').$extra.render = true\n      //                     form.$('hash').$extra.render = true\n      //                     form.$('txidType').$extra.render = false\n      //                 },\n      //             },\n      //             {\n      //                 value: 'IPFS',\n      //                 onClick: ({ form }) => {\n      //                     form.$('urlType').$extra.render = true\n      //                     form.$('hash').$extra.render = true\n      //                     form.$('txidType').$extra.render = false\n      //                 },\n      //             },\n      //             {\n      //                 value: 'TXID',\n      //                 onClick: ({ form }) => {\n      //                     form.$('urlType').$extra.render = false\n      //                     form.$('hash').$extra.render = true\n      //                     form.$('txidType').$extra.render = true\n      //                 },\n      //             },\n      //         ],\n      //     },\n      // },\n      // {\n      //     name: 'urlType',\n      //     type: 'radiogroup',\n      //     extra: {\n      //         render: false,\n      //         options: [\n      //             {\n      //                 value: 'link',\n      //             },\n      //             {\n      //                 value: 'iframe',\n      //             },\n      //             {\n      //                 value: 'mp4',\n      //             },\n      //             {\n      //                 value: 'mp3',\n      //             },\n      //         ],\n      //     },\n      // },\n      // {\n      //     name: 'txidType',\n      //     type: 'radiogroup',\n      //     extra: {\n      //         render: false,\n      //         options: [\n      //             {\n      //                 value: 'referendum',\n      //             },\n      //         ],\n      //     },\n      // },\n      // {\n      //     name: 'hash',\n      //     label: 'Hash',\n      //     placeholder: 'IPFS Hash / URL / TXID',\n      //     extra: {\n      //         render: false,\n      //     },\n      // },\n      {\n        name: 'buttons',\n        type: 'button',\n        hideLabels: true,\n        extra: {\n          options: [// {\n          //     value: 'Preview',\n          //     className: 'white bg-gray',\n          //     title: 'Preview the post before submitting',\n          //     onClick: form => {\n          //         if (form.isValid) {\n          //             console.log(this.newPostData)\n          //             // this.preview = form.values()\n          //             // this.preview.sub = {\n          //             //     value: this.newPostData.sub,\n          //             //     label: this.newPostData.sub,\n          //             // }\n          //         }\n          //     },\n          // },\n          {\n            value: 'Post ID',\n            title: 'Post with an anonymous ID'\n          }, {\n            value: 'Post',\n            disabled: !this.newAuthStore.hasAccount,\n            title: !this.newAuthStore.hasAccount ? 'You need to be logged in to post' : 'Post with your logged as ' + this.newAuthStore.posterName,\n            onClick: task.resolved(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(form) {\n                var post, uuid, posterName, newPost, submittedPost;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!(!form.hasError && _this2.newPostData.sub.value)) {\n                          _context2.next = 15;\n                          break;\n                        }\n\n                        post = form.values();\n                        uuid = generateUuid();\n                        posterName = _this2.newAuthStore.posterName;\n                        newPost = {\n                          poster: null,\n                          displayName: null,\n                          title: post.title,\n                          content: post.content,\n                          sub: _this2.newPostData.sub.value,\n                          chain: 'eos',\n                          mentions: [],\n                          tags: [_this2.newPostData.sub.value],\n                          uuid: uuid,\n                          parentUuid: '',\n                          threadUuid: uuid,\n                          attachment: getAttachmentValue(post),\n                          createdAt: Date.now()\n                        };\n\n                        if (posterName === _this2.newAuthStore.displayName.bk) {\n                          newPost.poster = undefined;\n                          newPost.displayName = posterName;\n                        }\n\n                        if (posterName === _this2.newAuthStore.displayName.scatter) {\n                          newPost.poster = posterName;\n                          newPost.displayName = posterName;\n                        }\n\n                        _context2.next = 9;\n                        return discussions.post(newPost);\n\n                      case 9:\n                        submittedPost = _context2.sent;\n                        _context2.next = 12;\n                        return sleep(5000);\n\n                      case 12:\n                        pushToThread(submittedPost);\n\n                        _this2.uiStore.showToast('Your post has been created!', 'success');\n\n                        _this2.clearPreview();\n\n                      case 15:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x2) {\n                return _ref.apply(this, arguments);\n              };\n            }())\n          }]\n        }\n      }]);\n    }\n  }]);\n\n  return Posts;\n}(BaseStore), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"posts\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"postsPosition\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      items: 0,\n      cursorId: undefined\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"preview\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"activeThreadId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"newPostData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      sub: {\n        value: '',\n        label: ''\n      }\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"replyingPostUUID\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"replyingPostContent\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"openingPostReplyContent\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"activeThread\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"getPostsByTag\", [task], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this3 = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(tags) {\n          var _ref3, posts, cursorId;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return discussions.getPostsForTags(tags, _this3.postsPosition.cursorId, _this3.postsPosition.items);\n\n                case 2:\n                  _ref3 = _context3.sent;\n                  posts = _ref3.posts;\n                  cursorId = _ref3.cursorId;\n                  _this3.posts = [].concat(_toConsumableArray(_this3.posts), _toConsumableArray(posts));\n                  _this3.postsPosition = {\n                    items: _this3.posts.length,\n                    cursorId: cursorId\n                  };\n                  return _context3.abrupt(\"return\", _this3.posts);\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    );\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"feedThreads\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"feedThreads\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAndSetThread\", [task, _dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"getAndSetThread\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getPossibleUsersToTag\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getPossibleUsersToTag\"), _class.prototype), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"getThreadById\", [task], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4(id) {\n          var thread;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  _context4.next = 3;\n                  return discussions.getThread(id);\n\n                case 3:\n                  thread = _context4.sent;\n\n                  if (thread) {\n                    _context4.next = 6;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\", null);\n\n                case 6:\n                  return _context4.abrupt(\"return\", new ThreadModel(thread));\n\n                case 9:\n                  _context4.prev = 9;\n                  _context4.t0 = _context4[\"catch\"](0);\n                  throw _context4.t0;\n\n                case 12:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[0, 9]]);\n        }));\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }()\n    );\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"vote\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref5 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5(uuid, value) {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.prev = 0;\n\n                  if (!_this4.newAuthStore.hasAccount) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  _context5.next = 4;\n                  return _this4.activeThread.vote(uuid, value);\n\n                case 4:\n                  _context5.next = 9;\n                  break;\n\n                case 6:\n                  _context5.prev = 6;\n                  _context5.t0 = _context5[\"catch\"](0);\n                  throw _context5.t0;\n\n                case 9:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, null, [[0, 6]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref5.apply(this, arguments);\n        };\n      }()\n    );\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"clearPreview\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this5 = this;\n\n    return function () {\n      _this5.preview = null;\n    };\n  }\n})), _class));\nexport { Posts as default };\nexport var getPostsStore = getOrCreateStore('postsStore', Posts);","map":null,"metadata":{},"sourceType":"module"}