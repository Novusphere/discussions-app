{"ast":null,"code":"var __jsx = React.createElement;\nimport App, { Container } from 'next/app';\nimport React from 'react';\nimport * as Stores from \"../stores\";\nimport { Provider, useStaticRendering } from 'mobx-react';\nimport { MainLayout } from \"../components\";\nimport { withMobx } from 'next-mobx-wrapper';\nimport { isServer } from \"../utils\";\nimport { create } from 'mobx-persist';\nimport { toast } from 'react-toastify';\nimport \"../styles/style.scss\"; // configure({ enforceActions: 'observed' })\n\nuseStaticRendering(isServer); // NOT `true` value\n\ntoast.configure();\n\nclass DiscussionApp extends App {\n  constructor(...args) {\n    super(...args);\n    this.props = void 0;\n  }\n\n  // static async getInitialProps({ ctx, Component }) {\n  //     const isServer = !!ctx.req\n  //     let pageProps = {}\n  //     //\n  //     if (Component.getInitialProps) {\n  //         pageProps = await Component.getInitialProps(ctx)\n  //     }\n  //\n  //     return {\n  //         isServer,\n  //         pageProps,\n  //     }\n  // }\n\n  /**\r\n   * Hydrate the store for LS here\r\n   * Due to SSR, we have to execute this part\r\n   * on the client.\r\n   */\n  async componentDidMount() {\n    if (!isServer) {\n      const {\n        newAuthStore,\n        settingsStore,\n        userStore,\n        notificationsStore\n      } = this.props.store;\n      const stores = {\n        auth: newAuthStore,\n        settings: settingsStore,\n        user: userStore,\n        notifications: notificationsStore\n      };\n      const hydrate = create({\n        storage: localStorage,\n        jsonify: true\n      });\n      Object.keys(stores).forEach(store => {\n        hydrate(store, stores[store]); // if (getVersion() !== this.props.store.settingsStore.localStorageVersion) {\n        //     console.error('local storage version mismatch')\n        //\n        //     result.rehydrate().then(() => {\n        //         console.log('store rehydrated')\n        //     })\n        // }\n      });\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Container, null, __jsx(Provider, store, __jsx(MainLayout, null, __jsx(Component, pageProps))));\n  }\n\n}\n\nexport default withMobx(Stores)(DiscussionApp);","map":null,"metadata":{},"sourceType":"module"}