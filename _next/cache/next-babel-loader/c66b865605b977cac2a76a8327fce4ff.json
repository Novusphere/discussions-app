{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDollarSign, faLink, faReply, faUserMinus, faUserPlus } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment';\nimport { Votes, ReplyBox, UserNameWithIcon } from \"./..\";\nimport ReactMarkdown from 'react-markdown';\nimport { inject, observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport { openInNewTab } from \"../../utils\";\nvar Reply = (_dec = inject('userStore', 'newAuthStore'), _dec(_class = observer(_class = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Reply, _React$Component);\n\n  function Reply() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Reply);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Reply)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isHover: false\n    };\n\n    _this.setHover = function (state) {\n      _this.setState({\n        isHover: state\n      });\n    };\n\n    _this.toggleFollowStatus = function () {\n      var post = _this.props.post;\n\n      _this.props.userStore.toggleUserFollowing(post.posterName, post.pub);\n    };\n\n    _this.renderHoverElements = function () {\n      if (!_this.state.isHover) {\n        return null;\n      }\n\n      var _this$props = _this.props,\n          post = _this$props.post,\n          getModel = _this$props.getModel,\n          userStore = _this$props.userStore,\n          newAuthStore = _this$props.newAuthStore;\n      var isFollowingUser = userStore.isFollowingUser;\n      var activePublicKey = newAuthStore.activePublicKey,\n          hasAccount = newAuthStore.hasAccount;\n      var replyModel = getModel(post);\n      return __jsx(\"div\", {\n        className: 'hover-elements disable-user-select'\n      }, __jsx(\"span\", {\n        onClick: replyModel.toggleOpen,\n        title: 'Reply to post'\n      }, __jsx(FontAwesomeIcon, {\n        icon: faReply\n      })), __jsx(\"span\", {\n        title: 'Donate tokens'\n      }, __jsx(FontAwesomeIcon, {\n        icon: faDollarSign\n      })), __jsx(\"span\", {\n        title: 'View block',\n        onClick: function onClick() {\n          return openInNewTab(\"https://eosq.app/tx/\".concat(post.transaction));\n        }\n      }, __jsx(FontAwesomeIcon, {\n        icon: faLink\n      })), post.pub && hasAccount && activePublicKey !== post.pub ? isFollowingUser(post.posterName) ? __jsx(\"span\", {\n        title: 'Unfollow user',\n        onClick: _this.toggleFollowStatus\n      }, __jsx(FontAwesomeIcon, {\n        icon: faUserMinus,\n        className: 'red'\n      })) : __jsx(\"span\", {\n        title: 'Follow user',\n        onClick: _this.toggleFollowStatus\n      }, __jsx(FontAwesomeIcon, {\n        icon: faUserPlus\n      })) : null);\n    };\n\n    return _this;\n  }\n\n  _createClass(Reply, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          post = _this$props2.post,\n          voteHandler = _this$props2.voteHandler,\n          getModel = _this$props2.getModel,\n          getRepliesFromMap = _this$props2.getRepliesFromMap,\n          className = _this$props2.className,\n          userStore = _this$props2.userStore,\n          newAuthStore = _this$props2.newAuthStore;\n      var replyModel = getModel(post);\n      var replies = getRepliesFromMap(post.uuid);\n      return __jsx(\"div\", {\n        className: classNames(['post-reply black', _defineProperty({}, className, !!className)]),\n        onMouseEnter: function onMouseEnter() {\n          return _this2.setHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.setHover(false);\n        }\n      }, this.renderHoverElements(), __jsx(\"div\", {\n        className: classNames(['flex flex-row pa2', {\n          'post-content-hover': this.state.isHover\n        }])\n      }, __jsx(\"div\", {\n        className: 'flex justify-between items-center mr2'\n      }, __jsx(Votes, {\n        upVotes: post.upvotes,\n        downVotes: post.downvotes,\n        myVote: post.myVote,\n        uuid: post.uuid,\n        handler: voteHandler\n      })), __jsx(\"div\", {\n        className: 'flex flex-column'\n      }, __jsx(\"div\", {\n        className: 'header pb0'\n      }, __jsx(UserNameWithIcon, {\n        imageData: post.imageData,\n        name: post.posterName\n      }), __jsx(\"span\", {\n        className: 'pl2 o-50 f6'\n      }, moment(post.createdAt).fromNow())), __jsx(ReactMarkdown, {\n        className: 'f6 lh-copy reply-content',\n        source: post.content\n      }))), replyModel.open ? __jsx(ReplyBox, {\n        className: classNames(['ph4 pb4', {\n          'post-content-hover': this.state.isHover\n        }]),\n        uid: post.uuid,\n        onContentChange: replyModel.setContent,\n        onSubmit: replyModel.onSubmit\n      }) : null, replies && replies.length ? replies.map(function (postReply) {\n        return __jsx(\"div\", {\n          onMouseLeave: function onMouseLeave() {\n            return _this2.setHover(true);\n          },\n          onMouseEnter: function onMouseEnter() {\n            return _this2.setHover(false);\n          },\n          key: postReply.uuid\n        }, __jsx(Reply, {\n          post: postReply,\n          getModel: getModel,\n          className: 'ml3',\n          getRepliesFromMap: getRepliesFromMap,\n          voteHandler: voteHandler,\n          userStore: userStore,\n          newAuthStore: newAuthStore\n        }));\n      }) : null);\n    }\n  }]);\n\n  return Reply;\n}(React.Component), _temp)) || _class) || _class);\nexport default Reply;","map":null,"metadata":{},"sourceType":"module"}