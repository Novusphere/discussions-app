{"ast":null,"code":"// https://www.reddit.com/prefs/apps\n// https://github.com/JubbeArt/removeddit/blob/master/src/api/reddit/auth.js\n// https://api.pushshift.io/reddit/search/comment?sort=asc&link_id=....&limit=10000\n// https://api.pushshift.io/reddit/search/submission?ids=....\nconst fetch = require('node-fetch');\n\nimport { Post } from \"../post\"; //import { AttachmentType, AttachmentDisplay, Attachment } from \"../attachment\";\n\nlet clientId = 'Gu4d7t1AglWJVg';\nlet token = undefined;\n\nconst toBase36 = number => parseInt(number, 10).toString(36);\n\nconst toBase10 = numberString => parseInt(numberString, 36); // Reddits way of indicating that something is deleted (the '\\\\' is for Reddit and the other is for pushshift)\n\n\nexport const isDeleted = textBody => textBody === '\\\\[deleted\\\\]' || textBody === '[deleted]'; // Reddits way of indicating that something is deleted\n\nexport const isRemoved = textBody => textBody === '\\\\[removed\\\\]' || textBody === '[removed]';\nexport class RedditService {\n  redditDataToPost(data) {\n    let p = new Post('reddit');\n    p.id = toBase10(data.id);\n    p.transaction = data.id;\n    p.uuid = 'reddit-' + data.id;\n\n    if (data.parent_id) {\n      p.parentUuid = 'reddit-' + data.parent_id.substring(3);\n    }\n\n    p.poster = data.author;\n    p.title = data.title;\n    p.content = data.selftext || data.body;\n    p.createdAt = new Date(data.created_utc * 1000);\n    p.upvotes = data.ups;\n    return p;\n  }\n\n  async getThread(owner, subreddit, threadId) {\n    console.log(subreddit + ' ' + threadId);\n    let posts = [];\n    let auth = await this.getAuth();\n    let response = await fetch(`https://oauth.reddit.com/r/${subreddit}/comments/${threadId}/_/`, auth);\n    let json = await response.json();\n    posts.push(this.redditDataToPost(json[0].data.children[0].data));\n    const replies = [json[1].data.children];\n\n    while (replies.length > 0) {\n      const children = replies.shift();\n\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i].data;\n        posts.push(this.redditDataToPost(child));\n\n        if (child.replies) {\n          replies.unshift(child.replies.data.children);\n        }\n      }\n    }\n\n    for (let i = 0; i < posts.length; i++) {\n      posts[i].sub = owner.sub;\n      posts[i].threadUuid = owner.threadUuid;\n    }\n\n    return posts;\n  }\n\n  async getThreadPushShift(subreddit, threadId) {\n    let post = await this.getPost(subreddit, threadId);\n\n    if (isDeleted(post.selftext) || isRemoved(post.selftext)) {\n      let removedPost = await this.getPostPushShift(threadId);\n\n      if (isRemoved(post.selftext)) {\n        removedPost.removed = true;\n      } else {\n        removedPost.deleted = true;\n      }\n    } // Get comment ids from pushshift\n\n\n    let pushshiftComments = await this.getCommentsPushShift(threadId); // Extract ids from pushshift response\n\n    const ids = pushshiftComments.map(comment => comment.id); // Get all the comments from reddit\n\n    let redditComments = await this.getComments(ids); // Temporary lookup for updating score\n\n    const redditCommentLookup = {};\n    redditComments.forEach(comment => {\n      redditCommentLookup[comment.id] = comment;\n    }); // Replace pushshift score with reddit (its usually more accurate)\n\n    pushshiftComments.forEach(comment => {\n      const redditComment = redditCommentLookup[comment.id];\n\n      if (redditComment !== undefined) {\n        comment.score = redditComment.score;\n      }\n    });\n    const removed = [];\n    const deleted = []; // Check what as removed / deleted according to reddit\n\n    redditComments.forEach(comment => {\n      if (isRemoved(comment.body)) {\n        removed.push(comment.id);\n      } else if (isDeleted(comment.body)) {\n        deleted.push(comment.id);\n      }\n    });\n    return {\n      comments: pushshiftComments,\n      removed: removed,\n      deleted: deleted\n    };\n  }\n\n  async getAuth() {\n    let token = await this.getToken();\n    return {\n      headers: {\n        Authorization: `bearer ${token}`\n      }\n    };\n  }\n\n  async getToken() {\n    if (token) {\n      return token;\n    } // Headers for getting reddit api token\n\n\n    const tokenInit = {\n      headers: {\n        Authorization: `Basic ${window.btoa(`${clientId}:`)}`,\n        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n      },\n      method: 'POST',\n      body: `grant_type=${encodeURIComponent('https://oauth.reddit.com/grants/installed_client')}&device_id=DO_NOT_TRACK_THIS_DEVICE`\n    };\n    let response = await fetch('https://www.reddit.com/api/v1/access_token', tokenInit);\n    let json = await response.json();\n    token = json.access_token;\n    return token || '';\n  }\n\n  async getPost(subreddit, threadId) {\n    let auth = await this.getAuth();\n    let response = await fetch(`https://oauth.reddit.com/r/${subreddit}/comments/${threadId}/_/`, auth);\n    let json = await response.json(); // let post = json[0].data.children[0].data;\n\n    return json;\n  }\n\n  async getPostPushShift(threadId) {\n    const elasticQuery = {\n      query: {\n        term: {\n          id: toBase10(threadId)\n        }\n      }\n    };\n    let response = await fetch('https://elastic.pushshift.io/rs/submissions/_search?source=' + JSON.stringify(elasticQuery));\n    let json = await response.json();\n    let post = json.hits.hits[0]._source;\n    post.id = toBase36(post.id);\n    return post;\n  }\n\n  async getComments(commentIds) {\n    let auth = await this.getAuth();\n    let promises = [];\n\n    for (let i = 0; i < commentIds.length; i += 100) {\n      let ids = commentIds.slice(i, i + 100);\n      promises.push(new Promise(async resolve => {\n        let response = await fetch(`https://oauth.reddit.com/api/info?id=${ids.map(id => `t1_${id}`).join()}`, auth);\n        let json = await response.json();\n        let commentsData = json.data.children;\n        return resolve(commentsData.map(commentData => commentData.data));\n      }));\n    }\n\n    return (await Promise.all(promises)).reduce((a, v) => a.concat(v), []);\n  }\n\n  async getCommentsPushShift(threadId) {\n    const elasticQuery = {\n      query: {\n        match: {\n          link_id: toBase10(threadId)\n        }\n      },\n      size: 20000,\n      _source: ['author', 'body', 'created_utc', 'parent_id', 'score', 'subreddit', 'link_id']\n    };\n    let response = await fetch('https://elastic.pushshift.io/rc/comments/_search?source=' + JSON.stringify(elasticQuery));\n    let json = await response.json();\n    const comments = json.hits.hits;\n    return comments.map(comment => {\n      comment._source.id = toBase36(comment._id);\n      comment._source.link_id = toBase36(comment._source.link_id); // Missing parent id === direct reply to thread\n\n      if (!comment._source.parent_id) {\n        comment._source.parent_id = threadId;\n      } else {\n        comment._source.parent_id = toBase36(comment._source.parent_id);\n      }\n\n      return comment._source;\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}